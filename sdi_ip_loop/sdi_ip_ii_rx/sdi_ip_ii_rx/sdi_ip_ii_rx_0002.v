// sdi_ip_ii_rx_0002.v

// This file was auto-generated from sdi_ii_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module sdi_ip_ii_rx_0002 #(
		parameter FAMILY               = "Cyclone V",
		parameter VIDEO_STANDARD       = "hd",
		parameter SD_BIT_WIDTH         = 10,
		parameter DIRECTION            = "rx",
		parameter TRANSCEIVER_PROTOCOL = "xcvr_proto",
		parameter HD_FREQ              = "148.5",
		parameter XCVR_TX_PLL_SEL      = 0,
		parameter RX_INC_ERR_TOLERANCE = 0,
		parameter RX_CRC_ERROR_OUTPUT  = 0,
		parameter RX_EN_VPID_EXTRACT   = 0,
		parameter RX_EN_A2B_CONV       = 0,
		parameter RX_EN_B2A_CONV       = 0,
		parameter TX_EN_VPID_INSERT    = 0,
		parameter IS_RTL_SIM           = 0
	) (
		output wire [19:0] rx_dataout,              //              rx_dataout.export
		output wire        rx_dataout_valid,        //        rx_dataout_valid.export
		output wire [0:0]  rx_f,                    //                    rx_f.export
		output wire [0:0]  rx_v,                    //                    rx_v.export
		output wire [0:0]  rx_h,                    //                    rx_h.export
		output wire [0:0]  rx_ap,                   //                   rx_ap.export
		output wire [4:0]  rx_format,               //               rx_format.export
		output wire [0:0]  rx_eav,                  //                  rx_eav.export
		output wire [0:0]  rx_trs,                  //                  rx_trs.export
		output wire        rx_align_locked,         //         rx_align_locked.export
		output wire [0:0]  rx_trs_locked,           //           rx_trs_locked.export
		output wire        rx_frame_locked,         //         rx_frame_locked.export
		output wire [10:0] rx_ln,                   //                   rx_ln.export
		output wire        rx_clkout,               //               rx_clkout.clk
		input  wire        rx_coreclk_is_ntsc_paln, // rx_coreclk_is_ntsc_paln.export
		output wire        rx_clkout_is_ntsc_paln,  //  rx_clkout_is_ntsc_paln.export
		output wire        rx_rst_proto_out,        //        rx_rst_proto_out.export
		input  wire        rx_rst,                  //                  rx_rst.reset
		input  wire        rx_coreclk,              //              rx_coreclk.clk
		input  wire        xcvr_refclk,             //             xcvr_refclk.clk
		input  wire        sdi_rx,                  //                  sdi_rx.export
		output wire        rx_pll_locked,           //           rx_pll_locked.export
		input  wire [69:0] reconfig_to_xcvr,        //        reconfig_to_xcvr.reconfig_to_xcvr
		output wire [45:0] reconfig_from_xcvr       //      reconfig_from_xcvr.reconfig_from_xcvr
	);

	wire         u_phy_adapter_xcvr_rxclk_clk;                              // u_phy_adapter:xcvr_rxclk -> u_rx_phy_mgmt:xcvr_rxclk
	wire  [19:0] u_phy_adapter_xcvr_rx_dataout_export;                      // u_phy_adapter:xcvr_rx_dataout -> u_rx_phy_mgmt:rx_datain
	wire         u_phy_adapter_xcvr_rx_ready_export;                        // u_phy_adapter:xcvr_rx_ready -> u_rx_phy_mgmt:rx_ready
	wire         u_rx_phy_mgmt_gxb_ltr_export;                              // u_rx_phy_mgmt:gxb_ltr -> u_phy_adapter:rx_set_locktoref
	wire         u_rx_phy_mgmt_gxb_ltd_export;                              // u_rx_phy_mgmt:gxb_ltd -> u_phy_adapter:rx_set_locktodata
	wire         u_rx_phy_mgmt_trig_rst_ctrl_export;                        // u_rx_phy_mgmt:trig_rst_ctrl -> u_phy_adapter:trig_rst_ctrl
	wire         rx_rst_coreclk_sync_reset_out_reset;                       // rx_rst_coreclk_sync:reset_out -> u_rx_phy_mgmt:rx_rst
	wire   [0:0] u_rx_protocol_rx_trs_loose_lock_out_export;                // u_rx_protocol:rx_trs_loose_lock_out -> u_rx_phy_mgmt:rx_trs_loose_lock_in
	wire         u_rx_phy_mgmt_rx_clkout_clk;                               // u_rx_phy_mgmt:rx_clkout -> u_rx_protocol:rx_clkin
	wire  [19:0] u_rx_phy_mgmt_rx_dataout_export;                           // u_rx_phy_mgmt:rx_dataout -> u_rx_protocol:rx_datain
	wire         u_rx_phy_mgmt_rx_dataout_valid_export;                     // u_rx_phy_mgmt:rx_dataout_valid -> u_rx_protocol:rx_datain_valid
	wire   [0:0] u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset;           // u_rx_phy_rst_ctrl:rx_analogreset -> u_phy:rx_analogreset
	wire   [0:0] u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset;         // u_rx_phy_rst_ctrl:rx_digitalreset -> u_phy:rx_digitalreset
	wire         u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata;   // u_phy_adapter:rx_locked_to_xcvr_ctrl -> u_rx_phy_rst_ctrl:rx_is_lockedtodata
	wire   [0:0] u_phy_rx_cal_busy_rx_cal_busy;                             // u_phy:rx_cal_busy -> u_rx_phy_rst_ctrl:rx_cal_busy
	wire   [0:0] u_rx_phy_rst_ctrl_rx_ready_rx_ready;                       // u_rx_phy_rst_ctrl:rx_ready -> u_phy_adapter:rx_ready_from_xcvr
	wire         u_phy_adapter_rx_manual_rx_reset_mode;                     // u_phy_adapter:rx_manual -> u_rx_phy_rst_ctrl:rx_manual
	wire  [69:0] u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr;      // u_phy_adapter:xcvr_reconfig_to_xcvr -> u_phy:reconfig_to_xcvr
	wire  [45:0] u_phy_reconfig_from_xcvr_reconfig_from_xcvr;               // u_phy:reconfig_from_xcvr -> u_phy_adapter:xcvr_reconfig_from_xcvr
	wire         u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk;                 // u_phy_adapter:rx_cdr_refclk -> u_phy:rx_cdr_refclk
	wire         u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin;           // u_phy_adapter:rx_std_coreclkin -> u_phy:rx_std_coreclkin
	wire   [0:0] u_phy_rx_std_clkout_rx_std_clkout;                         // u_phy:rx_std_clkout -> u_phy_adapter:rxclk_from_xcvr
	wire   [0:0] u_phy_rx_pma_clkout_rx_pma_clkout;                         // u_phy:rx_pma_clkout -> u_phy_adapter:rx_pma_clkout
	wire  [63:0] u_phy_rx_parallel_data_rx_parallel_data;                   // u_phy:rx_parallel_data -> u_phy_adapter:rx_dataout_from_xcvr
	wire         u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data;               // u_phy_adapter:sdi_rx_to_xcvr -> u_phy:rx_serial_data
	wire   [0:0] u_phy_rx_is_lockedtoref_rx_is_lockedtoref;                 // u_phy:rx_is_lockedtoref -> u_phy_adapter:xcvr_rx_is_lockedtoref
	wire   [0:0] u_phy_rx_is_lockedtodata_rx_is_lockedtodata;               // u_phy:rx_is_lockedtodata -> u_phy_adapter:xcvr_rx_is_lockedtodata
	wire         u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata; // u_phy_adapter:rx_set_locktodata_to_xcvr -> u_phy:rx_set_locktodata
	wire         u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref;   // u_phy_adapter:rx_set_locktoref_to_xcvr -> u_phy:rx_set_locktoref
	wire         rst_controller_reset_out_reset;                            // rst_controller:reset_out -> u_rx_phy_rst_ctrl:reset
	wire         u_phy_adapter_reset_to_xcvr_rst_ctrl_reset;                // u_phy_adapter:reset_to_xcvr_rst_ctrl -> rst_controller:reset_in0

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (FAMILY != "Cyclone V")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					family_check ( .error(1'b1) );
		end
		if (VIDEO_STANDARD != "hd")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					video_standard_check ( .error(1'b1) );
		end
		if (SD_BIT_WIDTH != 10)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					sd_bit_width_check ( .error(1'b1) );
		end
		if (DIRECTION != "rx")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					direction_check ( .error(1'b1) );
		end
		if (TRANSCEIVER_PROTOCOL != "xcvr_proto")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					transceiver_protocol_check ( .error(1'b1) );
		end
		if (HD_FREQ != "148.5")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					hd_freq_check ( .error(1'b1) );
		end
		if (XCVR_TX_PLL_SEL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					xcvr_tx_pll_sel_check ( .error(1'b1) );
		end
		if (RX_INC_ERR_TOLERANCE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_inc_err_tolerance_check ( .error(1'b1) );
		end
		if (RX_CRC_ERROR_OUTPUT != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_crc_error_output_check ( .error(1'b1) );
		end
		if (RX_EN_VPID_EXTRACT != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_en_vpid_extract_check ( .error(1'b1) );
		end
		if (RX_EN_A2B_CONV != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_en_a2b_conv_check ( .error(1'b1) );
		end
		if (RX_EN_B2A_CONV != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_en_b2a_conv_check ( .error(1'b1) );
		end
		if (TX_EN_VPID_INSERT != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_en_vpid_insert_check ( .error(1'b1) );
		end
		if (IS_RTL_SIM != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_rtl_sim_check ( .error(1'b1) );
		end
	endgenerate

	sdi_ii_phy_adapter #(
		.FAMILY            ("Cyclone V"),
		.VIDEO_STANDARD    ("hd"),
		.DIRECTION         ("rx"),
		.XCVR_TX_PLL_SEL   (0),
		.ED_TXPLL_SWITCH   (0),
		.XCVR_RST_CTRL_CHS (1)
	) u_phy_adapter (
		.xcvr_refclk                 (xcvr_refclk),                                                                //               xcvr_refclk.clk
		.xcvr_rxclk                  (u_phy_adapter_xcvr_rxclk_clk),                                               //                xcvr_rxclk.clk
		.reset_to_xcvr_rst_ctrl      (u_phy_adapter_reset_to_xcvr_rst_ctrl_reset),                                 //    reset_to_xcvr_rst_ctrl.reset
		.reconfig_from_xcvr          (reconfig_from_xcvr),                                                         //        reconfig_from_xcvr.reconfig_from_xcvr
		.reconfig_to_xcvr            (reconfig_to_xcvr),                                                           //          reconfig_to_xcvr.reconfig_to_xcvr
		.xcvr_reconfig_from_xcvr     (u_phy_reconfig_from_xcvr_reconfig_from_xcvr),                                //   xcvr_reconfig_from_xcvr.reconfig_from_xcvr
		.xcvr_reconfig_to_xcvr       (u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr),                       //     xcvr_reconfig_to_xcvr.reconfig_to_xcvr
		.rx_std_coreclkin            (u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin),                            //          rx_std_coreclkin.rx_std_coreclkin
		.rx_pma_clkout               (u_phy_rx_pma_clkout_rx_pma_clkout),                                          //             rx_pma_clkout.rx_pma_clkout
		.trig_rst_ctrl               (u_rx_phy_mgmt_trig_rst_ctrl_export),                                         //             trig_rst_ctrl.export
		.sdi_rx                      (sdi_rx),                                                                     //                    sdi_rx.export
		.rx_set_locktodata           (u_rx_phy_mgmt_gxb_ltd_export),                                               //         rx_set_locktodata.export
		.sdi_rx_to_xcvr              (u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data),                                //            sdi_rx_to_xcvr.rx_serial_data
		.rx_set_locktodata_to_xcvr   (u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata),                  // rx_set_locktodata_to_xcvr.rx_set_locktodata
		.rx_set_locktoref_to_xcvr    (u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref),                    //  rx_set_locktoref_to_xcvr.rx_set_locktoref
		.rx_pll_locked               (rx_pll_locked),                                                              //             rx_pll_locked.export
		.rx_dataout_from_xcvr        (u_phy_rx_parallel_data_rx_parallel_data),                                    //      rx_dataout_from_xcvr.rx_parallel_data
		.xcvr_rx_is_lockedtoref      (u_phy_rx_is_lockedtoref_rx_is_lockedtoref),                                  //    xcvr_rx_is_lockedtoref.rx_is_lockedtoref
		.xcvr_rx_is_lockedtodata     (u_phy_rx_is_lockedtodata_rx_is_lockedtodata),                                //   xcvr_rx_is_lockedtodata.rx_is_lockedtodata
		.xcvr_rx_dataout             (u_phy_adapter_xcvr_rx_dataout_export),                                       //           xcvr_rx_dataout.export
		.xcvr_rx_ready               (u_phy_adapter_xcvr_rx_ready_export),                                         //             xcvr_rx_ready.export
		.rx_cdr_refclk               (u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk),                                  //             rx_cdr_refclk.rx_cdr_refclk
		.rx_set_locktoref            (u_rx_phy_mgmt_gxb_ltr_export),                                               //          rx_set_locktoref.export
		.rxclk_from_xcvr             (u_phy_rx_std_clkout_rx_std_clkout),                                          //           rxclk_from_xcvr.rx_std_clkout
		.rx_locked_to_xcvr_ctrl      (u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata),                    //    rx_locked_to_xcvr_ctrl.rx_is_lockedtodata
		.rx_manual                   (u_phy_adapter_rx_manual_rx_reset_mode),                                      //                 rx_manual.rx_reset_mode
		.rx_ready_from_xcvr          (u_rx_phy_rst_ctrl_rx_ready_rx_ready),                                        //        rx_ready_from_xcvr.rx_ready
		.xcvr_refclk_alt             (1'b0),                                                                       //               (terminated)
		.tx_pclk                     (1'b0),                                                                       //               (terminated)
		.reconfig_clk_in             (1'b0),                                                                       //               (terminated)
		.tx_clkout                   (),                                                                           //               (terminated)
		.xcvr_rxclk_b                (),                                                                           //               (terminated)
		.reconfig_rst_in             (1'b0),                                                                       //               (terminated)
		.reset_to_xcvr_rst_ctrl_b    (),                                                                           //               (terminated)
		.reconfig_from_xcvr_b        (),                                                                           //               (terminated)
		.reconfig_to_xcvr_b          (70'b0000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.xcvr_reconfig_from_xcvr_b   (46'b0000000000000000000000000000000000000000000000),                         //               (terminated)
		.xcvr_reconfig_to_xcvr_b     (),                                                                           //               (terminated)
		.xcvr_refclk_sel             (1'b0),                                                                       //               (terminated)
		.tx_pll_locked_alt           (),                                                                           //               (terminated)
		.tx_pll_refclk               (),                                                                           //               (terminated)
		.tx_std_coreclkin            (),                                                                           //               (terminated)
		.sdi_tx_from_xcvr            (1'b0),                                                                       //               (terminated)
		.tx_pll_locked_from_xcvr     (1'b0),                                                                       //               (terminated)
		.sdi_tx                      (),                                                                           //               (terminated)
		.tx_pll_locked               (),                                                                           //               (terminated)
		.tx_pll_refclk_b             (),                                                                           //               (terminated)
		.tx_std_coreclkin_b          (),                                                                           //               (terminated)
		.sdi_tx_from_xcvr_b          (1'b0),                                                                       //               (terminated)
		.sdi_tx_b                    (),                                                                           //               (terminated)
		.rx_std_coreclkin_b          (),                                                                           //               (terminated)
		.rx_pma_clkout_b             (1'b0),                                                                       //               (terminated)
		.trig_rst_ctrl_b             (1'b0),                                                                       //               (terminated)
		.sdi_rx_b                    (1'b0),                                                                       //               (terminated)
		.rx_set_locktodata_b         (1'b0),                                                                       //               (terminated)
		.sdi_rx_to_xcvr_b            (),                                                                           //               (terminated)
		.rx_set_locktodata_to_xcvr_b (),                                                                           //               (terminated)
		.rx_set_locktoref_to_xcvr_b  (),                                                                           //               (terminated)
		.rx_pll_locked_b             (),                                                                           //               (terminated)
		.reconfig_clk_out            (),                                                                           //               (terminated)
		.reconfig_rst_out            (),                                                                           //               (terminated)
		.xcvr_tx_datain              (20'b00000000000000000000),                                                   //               (terminated)
		.tx_datain_to_xcvr           (),                                                                           //               (terminated)
		.tx_pll_select_to_xcvr_rst   (),                                                                           //               (terminated)
		.tx_serial_clk_out           (),                                                                           //               (terminated)
		.tx_serial_clk_alt_out       (),                                                                           //               (terminated)
		.pll_powerdown_in            (2'b00),                                                                      //               (terminated)
		.pll_powerdown_out           (),                                                                           //               (terminated)
		.pll_powerdown_out_b         (),                                                                           //               (terminated)
		.pll_locked_in               (1'b0),                                                                       //               (terminated)
		.pll_locked_in_b             (1'b0),                                                                       //               (terminated)
		.pll_locked_out              (),                                                                           //               (terminated)
		.tx_cal_busy_in              (1'b0),                                                                       //               (terminated)
		.pll_cal_busy_in             (1'b0),                                                                       //               (terminated)
		.pll_cal_busy_in_alt         (1'b0),                                                                       //               (terminated)
		.xcvr_tx_datain_b            (20'b00000000000000000000),                                                   //               (terminated)
		.tx_datain_to_xcvr_b         (),                                                                           //               (terminated)
		.tx_analogreset_in           (2'b00),                                                                      //               (terminated)
		.tx_analogreset_out          (),                                                                           //               (terminated)
		.tx_analogreset_out_b        (),                                                                           //               (terminated)
		.tx_digitalreset_in          (2'b00),                                                                      //               (terminated)
		.tx_digitalreset_out         (),                                                                           //               (terminated)
		.tx_digitalreset_out_b       (),                                                                           //               (terminated)
		.tx_cal_busy_in_b            (1'b0),                                                                       //               (terminated)
		.tx_pll_select_to_xcvr_rst_b (),                                                                           //               (terminated)
		.xcvr_tx_ready_b             (1'b0),                                                                       //               (terminated)
		.rx_dataout_from_xcvr_b      (64'b0000000000000000000000000000000000000000000000000000000000000000),       //               (terminated)
		.xcvr_rx_is_lockedtoref_b    (1'b0),                                                                       //               (terminated)
		.xcvr_rx_is_lockedtodata_b   (1'b0),                                                                       //               (terminated)
		.xcvr_rx_dataout_b           (),                                                                           //               (terminated)
		.rx_analogreset_in           (2'b00),                                                                      //               (terminated)
		.rx_analogreset_out          (),                                                                           //               (terminated)
		.rx_analogreset_out_b        (),                                                                           //               (terminated)
		.rx_digitalreset_in          (2'b00),                                                                      //               (terminated)
		.rx_digitalreset_out         (),                                                                           //               (terminated)
		.rx_digitalreset_out_b       (),                                                                           //               (terminated)
		.rx_cal_busy_in              (1'b0),                                                                       //               (terminated)
		.rx_cal_busy_in_b            (1'b0),                                                                       //               (terminated)
		.rx_cal_busy_out             (),                                                                           //               (terminated)
		.rx_locked_to_xcvr_ctrl_b    (),                                                                           //               (terminated)
		.rx_manual_b                 (),                                                                           //               (terminated)
		.rx_ready_from_xcvr_b        (1'b0),                                                                       //               (terminated)
		.tx_serial_clk_in            (1'b0),                                                                       //               (terminated)
		.tx_serial_clk_alt_in        (1'b0),                                                                       //               (terminated)
		.xcvr_rx_ready_b             (),                                                                           //               (terminated)
		.tx_clkout_from_xcvr         (1'b0),                                                                       //               (terminated)
		.tx_clkout_from_xcvr_b       (1'b0),                                                                       //               (terminated)
		.rx_cdr_refclk_b             (),                                                                           //               (terminated)
		.rxclk_from_xcvr_b           (1'b0),                                                                       //               (terminated)
		.rx_set_locktoref_b          (1'b0),                                                                       //               (terminated)
		.xcvr_tx_ready               (1'b0),                                                                       //               (terminated)
		.tx_cal_busy_out             ()                                                                            //               (terminated)
	);

	altera_xcvr_native_av #(
		.tx_enable                       (0),
		.rx_enable                       (1),
		.enable_std                      (1),
		.data_path_select                ("standard"),
		.channels                        (1),
		.bonded_mode                     ("non_bonded"),
		.data_rate                       ("1485 Mbps"),
		.pma_width                       (10),
		.tx_pma_clk_div                  (2),
		.pll_reconfig_enable             (0),
		.pll_external_enable             (0),
		.pll_data_rate                   ("2970 Mbps"),
		.pll_type                        ("CMU"),
		.pma_bonding_mode                ("x1"),
		.plls                            (1),
		.pll_select                      (0),
		.pll_refclk_cnt                  (1),
		.pll_refclk_select               ("0"),
		.pll_refclk_freq                 ("unused"),
		.pll_feedback_path               ("internal"),
		.cdr_reconfig_enable             (0),
		.cdr_refclk_cnt                  (1),
		.cdr_refclk_select               (0),
		.cdr_refclk_freq                 ("148.5 MHz"),
		.rx_ppm_detect_threshold         ("1000"),
		.rx_clkslip_enable               (0),
		.std_protocol_hint               ("basic"),
		.std_pcs_pma_width               (10),
		.std_low_latency_bypass_enable   (0),
		.std_tx_pcfifo_mode              ("low_latency"),
		.std_rx_pcfifo_mode              ("low_latency"),
		.std_rx_byte_order_enable        (0),
		.std_rx_byte_order_mode          ("manual"),
		.std_rx_byte_order_width         (10),
		.std_rx_byte_order_symbol_count  (1),
		.std_rx_byte_order_pattern       ("0"),
		.std_rx_byte_order_pad           ("0"),
		.std_tx_byte_ser_enable          (1),
		.std_rx_byte_deser_enable        (1),
		.std_tx_8b10b_enable             (0),
		.std_tx_8b10b_disp_ctrl_enable   (0),
		.std_rx_8b10b_enable             (0),
		.std_rx_rmfifo_enable            (0),
		.std_rx_rmfifo_pattern_p         ("00000"),
		.std_rx_rmfifo_pattern_n         ("00000"),
		.std_tx_bitslip_enable           (0),
		.std_rx_word_aligner_mode        ("bit_slip"),
		.std_rx_word_aligner_pattern_len (7),
		.std_rx_word_aligner_pattern     ("0000000000"),
		.std_rx_word_aligner_rknumber    (3),
		.std_rx_word_aligner_renumber    (3),
		.std_rx_word_aligner_rgnumber    (3),
		.std_rx_run_length_val           (31),
		.std_tx_bitrev_enable            (0),
		.std_rx_bitrev_enable            (0),
		.std_tx_byterev_enable           (0),
		.std_rx_byterev_enable           (0),
		.std_tx_polinv_enable            (0),
		.std_rx_polinv_enable            (0)
	) u_phy (
		.rx_analogreset            (u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset),                                      //     rx_analogreset.rx_analogreset
		.rx_digitalreset           (u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset),                                    //    rx_digitalreset.rx_digitalreset
		.rx_cdr_refclk             (u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk),                                            //      rx_cdr_refclk.rx_cdr_refclk
		.rx_pma_clkout             (u_phy_rx_pma_clkout_rx_pma_clkout),                                                    //      rx_pma_clkout.rx_pma_clkout
		.rx_serial_data            (u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data),                                          //     rx_serial_data.rx_serial_data
		.rx_set_locktodata         (u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata),                            //  rx_set_locktodata.rx_set_locktodata
		.rx_set_locktoref          (u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref),                              //   rx_set_locktoref.rx_set_locktoref
		.rx_is_lockedtoref         (u_phy_rx_is_lockedtoref_rx_is_lockedtoref),                                            //  rx_is_lockedtoref.rx_is_lockedtoref
		.rx_is_lockedtodata        (u_phy_rx_is_lockedtodata_rx_is_lockedtodata),                                          // rx_is_lockedtodata.rx_is_lockedtodata
		.rx_parallel_data          (u_phy_rx_parallel_data_rx_parallel_data),                                              //   rx_parallel_data.rx_parallel_data
		.rx_std_coreclkin          (u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin),                                      //   rx_std_coreclkin.rx_std_coreclkin
		.rx_std_clkout             (u_phy_rx_std_clkout_rx_std_clkout),                                                    //      rx_std_clkout.rx_std_clkout
		.rx_cal_busy               (u_phy_rx_cal_busy_rx_cal_busy),                                                        //        rx_cal_busy.rx_cal_busy
		.reconfig_to_xcvr          (u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr),                                 //   reconfig_to_xcvr.reconfig_to_xcvr
		.reconfig_from_xcvr        (u_phy_reconfig_from_xcvr_reconfig_from_xcvr),                                          // reconfig_from_xcvr.reconfig_from_xcvr
		.pll_powerdown             (1'b0),                                                                                 //        (terminated)
		.tx_analogreset            (1'b0),                                                                                 //        (terminated)
		.tx_digitalreset           (1'b0),                                                                                 //        (terminated)
		.tx_pll_refclk             (1'b0),                                                                                 //        (terminated)
		.tx_pma_clkout             (),                                                                                     //        (terminated)
		.tx_serial_data            (),                                                                                     //        (terminated)
		.tx_pma_parallel_data      (80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000), //        (terminated)
		.pll_locked                (),                                                                                     //        (terminated)
		.ext_pll_clk               (1'b0),                                                                                 //        (terminated)
		.rx_pma_parallel_data      (),                                                                                     //        (terminated)
		.rx_clkslip                (1'b0),                                                                                 //        (terminated)
		.rx_clklow                 (),                                                                                     //        (terminated)
		.rx_fref                   (),                                                                                     //        (terminated)
		.rx_seriallpbken           (1'b0),                                                                                 //        (terminated)
		.rx_signaldetect           (),                                                                                     //        (terminated)
		.tx_parallel_data          (44'b00000000000000000000000000000000000000000000),                                     //        (terminated)
		.tx_std_coreclkin          (1'b0),                                                                                 //        (terminated)
		.tx_std_clkout             (),                                                                                     //        (terminated)
		.rx_std_prbs_done          (),                                                                                     //        (terminated)
		.rx_std_prbs_err           (),                                                                                     //        (terminated)
		.tx_std_pcfifo_full        (),                                                                                     //        (terminated)
		.tx_std_pcfifo_empty       (),                                                                                     //        (terminated)
		.rx_std_pcfifo_full        (),                                                                                     //        (terminated)
		.rx_std_pcfifo_empty       (),                                                                                     //        (terminated)
		.rx_std_byteorder_ena      (1'b0),                                                                                 //        (terminated)
		.rx_std_byteorder_flag     (),                                                                                     //        (terminated)
		.rx_std_rmfifo_full        (),                                                                                     //        (terminated)
		.rx_std_rmfifo_empty       (),                                                                                     //        (terminated)
		.rx_std_wa_patternalign    (1'b0),                                                                                 //        (terminated)
		.rx_std_wa_a1a2size        (1'b0),                                                                                 //        (terminated)
		.tx_std_bitslipboundarysel (5'b00000),                                                                             //        (terminated)
		.rx_std_bitslipboundarysel (),                                                                                     //        (terminated)
		.rx_std_bitslip            (1'b0),                                                                                 //        (terminated)
		.rx_std_runlength_err      (),                                                                                     //        (terminated)
		.rx_std_bitrev_ena         (1'b0),                                                                                 //        (terminated)
		.rx_std_byterev_ena        (1'b0),                                                                                 //        (terminated)
		.tx_std_polinv             (1'b0),                                                                                 //        (terminated)
		.rx_std_polinv             (1'b0),                                                                                 //        (terminated)
		.tx_std_elecidle           (1'b0),                                                                                 //        (terminated)
		.rx_std_signaldetect       (),                                                                                     //        (terminated)
		.tx_cal_busy               ()                                                                                      //        (terminated)
	);

	altera_xcvr_reset_control #(
		.CHANNELS              (1),
		.PLLS                  (1),
		.SYS_CLK_IN_MHZ        (148),
		.SYNCHRONIZE_RESET     (0),
		.REDUCED_SIM_TIME      (0),
		.TX_PLL_ENABLE         (0),
		.T_PLL_POWERDOWN       (1000),
		.SYNCHRONIZE_PLL_RESET (0),
		.TX_ENABLE             (0),
		.TX_PER_CHANNEL        (0),
		.T_TX_DIGITALRESET     (20),
		.T_PLL_LOCK_HYST       (0),
		.EN_PLL_CAL_BUSY       (0),
		.RX_ENABLE             (1),
		.RX_PER_CHANNEL        (1),
		.T_RX_ANALOGRESET      (80),
		.T_RX_DIGITALRESET     (4000)
	) u_rx_phy_rst_ctrl (
		.clock              (rx_coreclk),                                              //              clock.clk
		.reset              (rst_controller_reset_out_reset),                          //              reset.reset
		.rx_analogreset     (u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset),         //     rx_analogreset.rx_analogreset
		.rx_digitalreset    (u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset),       //    rx_digitalreset.rx_digitalreset
		.rx_ready           (u_rx_phy_rst_ctrl_rx_ready_rx_ready),                     //           rx_ready.rx_ready
		.rx_is_lockedtodata (u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata), // rx_is_lockedtodata.rx_is_lockedtodata
		.rx_cal_busy        (u_phy_rx_cal_busy_rx_cal_busy),                           //        rx_cal_busy.rx_cal_busy
		.rx_manual          (u_phy_adapter_rx_manual_rx_reset_mode),                   //      rx_reset_mode.rx_reset_mode
		.pll_powerdown      (),                                                        //        (terminated)
		.tx_analogreset     (),                                                        //        (terminated)
		.tx_digitalreset    (),                                                        //        (terminated)
		.tx_ready           (),                                                        //        (terminated)
		.pll_locked         (1'b0),                                                    //        (terminated)
		.pll_select         (1'b0),                                                    //        (terminated)
		.tx_cal_busy        (1'b0),                                                    //        (terminated)
		.pll_cal_busy       (1'b0),                                                    //        (terminated)
		.tx_manual          (1'b1),                                                    //        (terminated)
		.tx_digitalreset_or (1'b0),                                                    //        (terminated)
		.rx_digitalreset_or (1'b0)                                                     //        (terminated)
	);

	sdi_ii_rx_protocol #(
		.FAMILY               ("Cyclone V"),
		.VIDEO_STANDARD       ("hd"),
		.SD_BIT_WIDTH         (10),
		.RX_INC_ERR_TOLERANCE (0),
		.RX_CRC_ERROR_OUTPUT  (0),
		.RX_EN_VPID_EXTRACT   (0),
		.RX_EN_A2B_CONV       (0),
		.RX_EN_B2A_CONV       (0),
		.IS_RTL_SIM           (0)
	) u_rx_protocol (
		.rx_clkin                 (u_rx_phy_mgmt_rx_clkout_clk),                //              rx_clkin.clk
		.rx_clkout                (rx_clkout),                                  //             rx_clkout.clk
		.rx_rst_proto_in          (rx_rst_proto_out),                           //       rx_rst_proto_in.export
		.rx_datain                (u_rx_phy_mgmt_rx_dataout_export),            //             rx_datain.export
		.rx_datain_valid          (u_rx_phy_mgmt_rx_dataout_valid_export),      //       rx_datain_valid.export
		.rx_dataout               (rx_dataout),                                 //            rx_dataout.export
		.rx_dataout_valid         (rx_dataout_valid),                           //      rx_dataout_valid.export
		.rx_f                     (rx_f),                                       //                  rx_f.export
		.rx_v                     (rx_v),                                       //                  rx_v.export
		.rx_h                     (rx_h),                                       //                  rx_h.export
		.rx_ap                    (rx_ap),                                      //                 rx_ap.export
		.rx_format                (rx_format),                                  //             rx_format.export
		.rx_align_locked          (rx_align_locked),                            //       rx_align_locked.export
		.rx_trs_locked            (rx_trs_locked),                              //         rx_trs_locked.export
		.rx_frame_locked          (rx_frame_locked),                            //       rx_frame_locked.export
		.rx_ln                    (rx_ln),                                      //                 rx_ln.export
		.rx_eav                   (rx_eav),                                     //                rx_eav.export
		.rx_trs                   (rx_trs),                                     //                rx_trs.export
		.rx_trs_loose_lock_out    (u_rx_protocol_rx_trs_loose_lock_out_export), // rx_trs_loose_lock_out.export
		.rx_clkin_b               (1'b0),                                       //           (terminated)
		.rx_clkin_smpte372        (1'b0),                                       //           (terminated)
		.rx_clkout_b              (),                                           //           (terminated)
		.rx_std_in                (3'b000),                                     //           (terminated)
		.rx_std                   (),                                           //           (terminated)
		.rx_crc_error_c           (),                                           //           (terminated)
		.rx_crc_error_y           (),                                           //           (terminated)
		.rx_crc_error_c_b         (),                                           //           (terminated)
		.rx_crc_error_y_b         (),                                           //           (terminated)
		.rx_ln_b                  (),                                           //           (terminated)
		.rx_vpid_byte1            (),                                           //           (terminated)
		.rx_vpid_byte2            (),                                           //           (terminated)
		.rx_vpid_byte3            (),                                           //           (terminated)
		.rx_vpid_byte4            (),                                           //           (terminated)
		.rx_vpid_valid            (),                                           //           (terminated)
		.rx_vpid_checksum_error   (),                                           //           (terminated)
		.rx_line_f0               (),                                           //           (terminated)
		.rx_line_f1               (),                                           //           (terminated)
		.rx_vpid_byte1_b          (),                                           //           (terminated)
		.rx_vpid_byte2_b          (),                                           //           (terminated)
		.rx_vpid_byte3_b          (),                                           //           (terminated)
		.rx_vpid_byte4_b          (),                                           //           (terminated)
		.rx_vpid_valid_b          (),                                           //           (terminated)
		.rx_vpid_checksum_error_b (),                                           //           (terminated)
		.rx_rst_proto_in_b        (1'b0),                                       //           (terminated)
		.rx_datain_b              (20'b00000000000000000000),                   //           (terminated)
		.rx_datain_valid_b        (1'b0),                                       //           (terminated)
		.rx_align_locked_b        (),                                           //           (terminated)
		.rx_trs_locked_b          (),                                           //           (terminated)
		.rx_frame_locked_b        (),                                           //           (terminated)
		.rx_trs_loose_lock_out_b  (),                                           //           (terminated)
		.rx_dl_locked             (),                                           //           (terminated)
		.rx_dataout_b             (),                                           //           (terminated)
		.rx_dataout_valid_b       ()                                            //           (terminated)
	);

	sdi_ii_rx_phy_mgmt #(
		.FAMILY               ("Cyclone V"),
		.VIDEO_STANDARD       ("hd"),
		.SD_BIT_WIDTH         (10),
		.DIRECTION            ("rx"),
		.TRANSCEIVER_PROTOCOL ("xcvr_proto"),
		.HD_FREQ              ("148.5"),
		.IS_RTL_SIM           (0)
	) u_rx_phy_mgmt (
		.xcvr_rxclk              (u_phy_adapter_xcvr_rxclk_clk),               //              xcvr_rxclk.clk
		.rx_coreclk              (rx_coreclk),                                 //              rx_coreclk.clk
		.rx_clkout               (u_rx_phy_mgmt_rx_clkout_clk),                //               rx_clkout.clk
		.rx_rst                  (rx_rst_coreclk_sync_reset_out_reset),        //                  rx_rst.reset
		.rx_trs_loose_lock_in    (u_rx_protocol_rx_trs_loose_lock_out_export), //    rx_trs_loose_lock_in.export
		.rx_datain               (u_phy_adapter_xcvr_rx_dataout_export),       //               rx_datain.export
		.rx_rst_proto_out        (rx_rst_proto_out),                           //        rx_rst_proto_out.export
		.rx_dataout              (u_rx_phy_mgmt_rx_dataout_export),            //              rx_dataout.export
		.rx_dataout_valid        (u_rx_phy_mgmt_rx_dataout_valid_export),      //        rx_dataout_valid.export
		.rx_coreclk_is_ntsc_paln (rx_coreclk_is_ntsc_paln),                    // rx_coreclk_is_ntsc_paln.export
		.rx_clkout_is_ntsc_paln  (rx_clkout_is_ntsc_paln),                     //  rx_clkout_is_ntsc_paln.export
		.rx_pll_locked           (rx_pll_locked),                              //           rx_pll_locked.export
		.gxb_ltr                 (u_rx_phy_mgmt_gxb_ltr_export),               //                 gxb_ltr.export
		.gxb_ltd                 (u_rx_phy_mgmt_gxb_ltd_export),               //                 gxb_ltd.export
		.trig_rst_ctrl           (u_rx_phy_mgmt_trig_rst_ctrl_export),         //           trig_rst_ctrl.export
		.rx_ready                (u_phy_adapter_xcvr_rx_ready_export),         //                rx_ready.export
		.rx_coreclk_hd           (1'b0),                                       //             (terminated)
		.xcvr_rxclk_b            (1'b0),                                       //             (terminated)
		.rx_clkout_b             (),                                           //             (terminated)
		.rx_sdi_start_reconfig   (),                                           //             (terminated)
		.rx_sdi_reconfig_done    (1'b0),                                       //             (terminated)
		.rx_std                  (),                                           //             (terminated)
		.rx_trs_loose_lock_in_b  (1'b0),                                       //             (terminated)
		.rx_datain_b             (20'b00000000000000000000),                   //             (terminated)
		.rx_rst_proto_out_b      (),                                           //             (terminated)
		.rx_dataout_b            (),                                           //             (terminated)
		.rx_dataout_valid_b      (),                                           //             (terminated)
		.rx_pll_locked_b         (1'b0),                                       //             (terminated)
		.trig_rst_ctrl_b         (),                                           //             (terminated)
		.gxb_ltr_b               (),                                           //             (terminated)
		.gxb_ltd_b               (),                                           //             (terminated)
		.rx_ready_b              (1'b0)                                        //             (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rx_rst_coreclk_sync (
		.reset_in0      (rx_rst),                              // reset_in0.reset
		.clk            (rx_coreclk),                          //       clk.clk
		.reset_out      (rx_rst_coreclk_sync_reset_out_reset), // reset_out.reset
		.reset_req      (),                                    // (terminated)
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_in1      (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_in2      (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (u_phy_adapter_reset_to_xcvr_rst_ctrl_reset), // reset_in0.reset
		.clk            (rx_coreclk),                                 //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),             // reset_out.reset
		.reset_req      (),                                           // (terminated)
		.reset_req_in0  (1'b0),                                       // (terminated)
		.reset_in1      (1'b0),                                       // (terminated)
		.reset_req_in1  (1'b0),                                       // (terminated)
		.reset_in2      (1'b0),                                       // (terminated)
		.reset_req_in2  (1'b0),                                       // (terminated)
		.reset_in3      (1'b0),                                       // (terminated)
		.reset_req_in3  (1'b0),                                       // (terminated)
		.reset_in4      (1'b0),                                       // (terminated)
		.reset_req_in4  (1'b0),                                       // (terminated)
		.reset_in5      (1'b0),                                       // (terminated)
		.reset_req_in5  (1'b0),                                       // (terminated)
		.reset_in6      (1'b0),                                       // (terminated)
		.reset_req_in6  (1'b0),                                       // (terminated)
		.reset_in7      (1'b0),                                       // (terminated)
		.reset_req_in7  (1'b0),                                       // (terminated)
		.reset_in8      (1'b0),                                       // (terminated)
		.reset_req_in8  (1'b0),                                       // (terminated)
		.reset_in9      (1'b0),                                       // (terminated)
		.reset_req_in9  (1'b0),                                       // (terminated)
		.reset_in10     (1'b0),                                       // (terminated)
		.reset_req_in10 (1'b0),                                       // (terminated)
		.reset_in11     (1'b0),                                       // (terminated)
		.reset_req_in11 (1'b0),                                       // (terminated)
		.reset_in12     (1'b0),                                       // (terminated)
		.reset_req_in12 (1'b0),                                       // (terminated)
		.reset_in13     (1'b0),                                       // (terminated)
		.reset_req_in13 (1'b0),                                       // (terminated)
		.reset_in14     (1'b0),                                       // (terminated)
		.reset_req_in14 (1'b0),                                       // (terminated)
		.reset_in15     (1'b0),                                       // (terminated)
		.reset_req_in15 (1'b0)                                        // (terminated)
	);

endmodule
