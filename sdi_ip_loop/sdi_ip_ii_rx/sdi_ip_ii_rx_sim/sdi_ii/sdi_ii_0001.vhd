-- sdi_ii_0001.vhd

-- This file was auto-generated from sdi_ii_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.0 145

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sdi_ii_0001 is
	generic (
		FAMILY               : string  := "Cyclone V";
		VIDEO_STANDARD       : string  := "hd";
		SD_BIT_WIDTH         : integer := 10;
		DIRECTION            : string  := "rx";
		TRANSCEIVER_PROTOCOL : string  := "xcvr_proto";
		HD_FREQ              : string  := "148.5";
		XCVR_TX_PLL_SEL      : integer := 0;
		RX_INC_ERR_TOLERANCE : integer := 0;
		RX_CRC_ERROR_OUTPUT  : integer := 0;
		RX_EN_VPID_EXTRACT   : integer := 0;
		RX_EN_A2B_CONV       : integer := 0;
		RX_EN_B2A_CONV       : integer := 0;
		TX_EN_VPID_INSERT    : integer := 0;
		IS_RTL_SIM           : integer := 0
	);
	port (
		rx_dataout              : out std_logic_vector(19 downto 0);                    --              rx_dataout.export
		rx_dataout_valid        : out std_logic;                                        --        rx_dataout_valid.export
		rx_f                    : out std_logic_vector(0 downto 0);                     --                    rx_f.export
		rx_v                    : out std_logic_vector(0 downto 0);                     --                    rx_v.export
		rx_h                    : out std_logic_vector(0 downto 0);                     --                    rx_h.export
		rx_ap                   : out std_logic_vector(0 downto 0);                     --                   rx_ap.export
		rx_format               : out std_logic_vector(4 downto 0);                     --               rx_format.export
		rx_eav                  : out std_logic_vector(0 downto 0);                     --                  rx_eav.export
		rx_trs                  : out std_logic_vector(0 downto 0);                     --                  rx_trs.export
		rx_align_locked         : out std_logic;                                        --         rx_align_locked.export
		rx_trs_locked           : out std_logic_vector(0 downto 0);                     --           rx_trs_locked.export
		rx_frame_locked         : out std_logic;                                        --         rx_frame_locked.export
		rx_ln                   : out std_logic_vector(10 downto 0);                    --                   rx_ln.export
		rx_clkout               : out std_logic;                                        --               rx_clkout.clk
		rx_coreclk_is_ntsc_paln : in  std_logic                     := '0';             -- rx_coreclk_is_ntsc_paln.export
		rx_clkout_is_ntsc_paln  : out std_logic;                                        --  rx_clkout_is_ntsc_paln.export
		rx_rst_proto_out        : out std_logic;                                        --        rx_rst_proto_out.export
		rx_rst                  : in  std_logic                     := '0';             --                  rx_rst.reset
		rx_coreclk              : in  std_logic                     := '0';             --              rx_coreclk.clk
		xcvr_refclk             : in  std_logic                     := '0';             --             xcvr_refclk.clk
		sdi_rx                  : in  std_logic                     := '0';             --                  sdi_rx.export
		rx_pll_locked           : out std_logic;                                        --           rx_pll_locked.export
		reconfig_to_xcvr        : in  std_logic_vector(69 downto 0) := (others => '0'); --        reconfig_to_xcvr.reconfig_to_xcvr
		reconfig_from_xcvr      : out std_logic_vector(45 downto 0)                     --      reconfig_from_xcvr.reconfig_from_xcvr
	);
end entity sdi_ii_0001;

architecture rtl of sdi_ii_0001 is
	component sdi_ii_phy_adapter is
		generic (
			FAMILY            : string  := "STRATIX V";
			VIDEO_STANDARD    : string  := "hd";
			DIRECTION         : string  := "du";
			XCVR_TX_PLL_SEL   : integer := 0;
			ED_TXPLL_SWITCH   : integer := 0;
			XCVR_RST_CTRL_CHS : integer := 1
		);
		port (
			xcvr_refclk                 : in  std_logic                     := 'X';             -- clk
			xcvr_rxclk                  : out std_logic;                                        -- clk
			reset_to_xcvr_rst_ctrl      : out std_logic;                                        -- reset
			reconfig_from_xcvr          : out std_logic_vector(45 downto 0);                    -- reconfig_from_xcvr
			reconfig_to_xcvr            : in  std_logic_vector(69 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			xcvr_reconfig_from_xcvr     : in  std_logic_vector(45 downto 0) := (others => 'X'); -- reconfig_from_xcvr
			xcvr_reconfig_to_xcvr       : out std_logic_vector(69 downto 0);                    -- reconfig_to_xcvr
			rx_std_coreclkin            : out std_logic;                                        -- rx_std_coreclkin
			rx_pma_clkout               : in  std_logic                     := 'X';             -- rx_pma_clkout
			trig_rst_ctrl               : in  std_logic                     := 'X';             -- export
			sdi_rx                      : in  std_logic                     := 'X';             -- export
			rx_set_locktodata           : in  std_logic                     := 'X';             -- export
			sdi_rx_to_xcvr              : out std_logic;                                        -- rx_serial_data
			rx_set_locktodata_to_xcvr   : out std_logic;                                        -- rx_set_locktodata
			rx_set_locktoref_to_xcvr    : out std_logic;                                        -- rx_set_locktoref
			rx_pll_locked               : out std_logic;                                        -- export
			rx_dataout_from_xcvr        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- rx_parallel_data
			xcvr_rx_is_lockedtoref      : in  std_logic                     := 'X';             -- rx_is_lockedtoref
			xcvr_rx_is_lockedtodata     : in  std_logic                     := 'X';             -- rx_is_lockedtodata
			xcvr_rx_dataout             : out std_logic_vector(19 downto 0);                    -- export
			xcvr_rx_ready               : out std_logic;                                        -- export
			rx_cdr_refclk               : out std_logic;                                        -- rx_cdr_refclk
			rx_set_locktoref            : in  std_logic                     := 'X';             -- export
			rxclk_from_xcvr             : in  std_logic                     := 'X';             -- rx_std_clkout
			rx_locked_to_xcvr_ctrl      : out std_logic;                                        -- rx_is_lockedtodata
			rx_manual                   : out std_logic;                                        -- rx_reset_mode
			rx_ready_from_xcvr          : in  std_logic                     := 'X';             -- rx_ready
			xcvr_refclk_alt             : in  std_logic                     := 'X';             -- clk
			tx_pclk                     : in  std_logic                     := 'X';             -- clk
			reconfig_clk_in             : in  std_logic                     := 'X';             -- clk
			tx_clkout                   : out std_logic;                                        -- clk
			xcvr_rxclk_b                : out std_logic;                                        -- clk
			reconfig_rst_in             : in  std_logic                     := 'X';             -- reset
			reset_to_xcvr_rst_ctrl_b    : out std_logic;                                        -- reset
			reconfig_from_xcvr_b        : out std_logic_vector(45 downto 0);                    -- reconfig_from_xcvr
			reconfig_to_xcvr_b          : in  std_logic_vector(69 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			xcvr_reconfig_from_xcvr_b   : in  std_logic_vector(45 downto 0) := (others => 'X'); -- reconfig_from_xcvr
			xcvr_reconfig_to_xcvr_b     : out std_logic_vector(69 downto 0);                    -- reconfig_to_xcvr
			xcvr_refclk_sel             : in  std_logic                     := 'X';             -- export
			tx_pll_locked_alt           : out std_logic;                                        -- export
			tx_pll_refclk               : out std_logic;                                        -- tx_pll_refclk
			tx_std_coreclkin            : out std_logic;                                        -- tx_std_coreclkin
			sdi_tx_from_xcvr            : in  std_logic                     := 'X';             -- tx_serial_data
			tx_pll_locked_from_xcvr     : in  std_logic                     := 'X';             -- pll_locked
			sdi_tx                      : out std_logic;                                        -- export
			tx_pll_locked               : out std_logic;                                        -- export
			tx_pll_refclk_b             : out std_logic;                                        -- tx_pll_refclk
			tx_std_coreclkin_b          : out std_logic;                                        -- tx_std_coreclkin
			sdi_tx_from_xcvr_b          : in  std_logic                     := 'X';             -- tx_serial_data
			sdi_tx_b                    : out std_logic;                                        -- export
			rx_std_coreclkin_b          : out std_logic;                                        -- rx_std_coreclkin
			rx_pma_clkout_b             : in  std_logic                     := 'X';             -- rx_pma_clkout
			trig_rst_ctrl_b             : in  std_logic                     := 'X';             -- export
			sdi_rx_b                    : in  std_logic                     := 'X';             -- export
			rx_set_locktodata_b         : in  std_logic                     := 'X';             -- export
			sdi_rx_to_xcvr_b            : out std_logic;                                        -- rx_serial_data
			rx_set_locktodata_to_xcvr_b : out std_logic;                                        -- rx_set_locktodata
			rx_set_locktoref_to_xcvr_b  : out std_logic;                                        -- rx_set_locktoref
			rx_pll_locked_b             : out std_logic;                                        -- export
			reconfig_clk_out            : out std_logic;                                        -- clk
			reconfig_rst_out            : out std_logic;                                        -- reset
			xcvr_tx_datain              : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			tx_datain_to_xcvr           : out std_logic_vector(43 downto 0);                    -- tx_parallel_data
			tx_pll_select_to_xcvr_rst   : out std_logic;                                        -- pll_select
			tx_serial_clk_out           : out std_logic;                                        -- clk
			tx_serial_clk_alt_out       : out std_logic;                                        -- clk
			pll_powerdown_in            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- pll_powerdown
			pll_powerdown_out           : out std_logic;                                        -- pll_powerdown
			pll_powerdown_out_b         : out std_logic;                                        -- pll_powerdown
			pll_locked_in               : in  std_logic                     := 'X';             -- pll_locked
			pll_locked_in_b             : in  std_logic                     := 'X';             -- pll_locked
			pll_locked_out              : out std_logic_vector(1 downto 0);                     -- pll_locked
			tx_cal_busy_in              : in  std_logic                     := 'X';             -- tx_cal_busy
			pll_cal_busy_in             : in  std_logic                     := 'X';             -- pll_cal_busy
			pll_cal_busy_in_alt         : in  std_logic                     := 'X';             -- pll_cal_busy
			xcvr_tx_datain_b            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			tx_datain_to_xcvr_b         : out std_logic_vector(43 downto 0);                    -- tx_parallel_data
			tx_analogreset_in           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- tx_analogreset
			tx_analogreset_out          : out std_logic;                                        -- tx_analogreset
			tx_analogreset_out_b        : out std_logic;                                        -- tx_analogreset
			tx_digitalreset_in          : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- tx_digitalreset
			tx_digitalreset_out         : out std_logic;                                        -- tx_digitalreset
			tx_digitalreset_out_b       : out std_logic;                                        -- tx_digitalreset
			tx_cal_busy_in_b            : in  std_logic                     := 'X';             -- tx_cal_busy
			tx_pll_select_to_xcvr_rst_b : out std_logic;                                        -- pll_select
			xcvr_tx_ready_b             : in  std_logic                     := 'X';             -- tx_ready
			rx_dataout_from_xcvr_b      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- rx_parallel_data
			xcvr_rx_is_lockedtoref_b    : in  std_logic                     := 'X';             -- rx_is_lockedtoref
			xcvr_rx_is_lockedtodata_b   : in  std_logic                     := 'X';             -- rx_is_lockedtodata
			xcvr_rx_dataout_b           : out std_logic_vector(19 downto 0);                    -- export
			rx_analogreset_in           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rx_analogreset
			rx_analogreset_out          : out std_logic;                                        -- rx_analogreset
			rx_analogreset_out_b        : out std_logic;                                        -- rx_analogreset
			rx_digitalreset_in          : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rx_digitalreset
			rx_digitalreset_out         : out std_logic;                                        -- rx_digitalreset
			rx_digitalreset_out_b       : out std_logic;                                        -- rx_digitalreset
			rx_cal_busy_in              : in  std_logic                     := 'X';             -- rx_cal_busy
			rx_cal_busy_in_b            : in  std_logic                     := 'X';             -- rx_cal_busy
			rx_cal_busy_out             : out std_logic_vector(1 downto 0);                     -- rx_cal_busy
			rx_locked_to_xcvr_ctrl_b    : out std_logic;                                        -- rx_is_lockedtodata
			rx_manual_b                 : out std_logic;                                        -- rx_reset_mode
			rx_ready_from_xcvr_b        : in  std_logic                     := 'X';             -- rx_ready
			tx_serial_clk_in            : in  std_logic                     := 'X';             -- clk
			tx_serial_clk_alt_in        : in  std_logic                     := 'X';             -- clk
			xcvr_rx_ready_b             : out std_logic;                                        -- export
			tx_clkout_from_xcvr         : in  std_logic                     := 'X';             -- tx_std_clkout
			tx_clkout_from_xcvr_b       : in  std_logic                     := 'X';             -- tx_std_clkout
			rx_cdr_refclk_b             : out std_logic;                                        -- rx_cdr_refclk
			rxclk_from_xcvr_b           : in  std_logic                     := 'X';             -- rx_std_clkout
			rx_set_locktoref_b          : in  std_logic                     := 'X';             -- export
			xcvr_tx_ready               : in  std_logic                     := 'X';             -- tx_ready
			tx_cal_busy_out             : out std_logic                                         -- tx_cal_busy
		);
	end component sdi_ii_phy_adapter;

	component altera_xcvr_native_av is
		generic (
			tx_enable                       : integer := 1;
			rx_enable                       : integer := 1;
			enable_std                      : integer := 1;
			data_path_select                : string  := "standard";
			channels                        : integer := 1;
			bonded_mode                     : string  := "non_bonded";
			data_rate                       : string  := "";
			pma_width                       : integer := 10;
			tx_pma_clk_div                  : integer := 1;
			pll_reconfig_enable             : integer := 0;
			pll_external_enable             : integer := 0;
			pll_data_rate                   : string  := "0 Mbps";
			pll_type                        : string  := "CMU";
			pma_bonding_mode                : string  := "x1";
			plls                            : integer := 1;
			pll_select                      : integer := 0;
			pll_refclk_cnt                  : integer := 1;
			pll_refclk_select               : string  := "0";
			pll_refclk_freq                 : string  := "125.0 MHz";
			pll_feedback_path               : string  := "internal";
			cdr_reconfig_enable             : integer := 0;
			cdr_refclk_cnt                  : integer := 1;
			cdr_refclk_select               : integer := 0;
			cdr_refclk_freq                 : string  := "";
			rx_ppm_detect_threshold         : string  := "1000";
			rx_clkslip_enable               : integer := 0;
			std_protocol_hint               : string  := "basic";
			std_pcs_pma_width               : integer := 10;
			std_low_latency_bypass_enable   : integer := 0;
			std_tx_pcfifo_mode              : string  := "low_latency";
			std_rx_pcfifo_mode              : string  := "low_latency";
			std_rx_byte_order_enable        : integer := 0;
			std_rx_byte_order_mode          : string  := "manual";
			std_rx_byte_order_width         : integer := 10;
			std_rx_byte_order_symbol_count  : integer := 1;
			std_rx_byte_order_pattern       : string  := "0";
			std_rx_byte_order_pad           : string  := "0";
			std_tx_byte_ser_enable          : integer := 0;
			std_rx_byte_deser_enable        : integer := 0;
			std_tx_8b10b_enable             : integer := 0;
			std_tx_8b10b_disp_ctrl_enable   : integer := 0;
			std_rx_8b10b_enable             : integer := 0;
			std_rx_rmfifo_enable            : integer := 0;
			std_rx_rmfifo_pattern_p         : string  := "00000";
			std_rx_rmfifo_pattern_n         : string  := "00000";
			std_tx_bitslip_enable           : integer := 0;
			std_rx_word_aligner_mode        : string  := "bit_slip";
			std_rx_word_aligner_pattern_len : integer := 7;
			std_rx_word_aligner_pattern     : string  := "0000000000";
			std_rx_word_aligner_rknumber    : integer := 3;
			std_rx_word_aligner_renumber    : integer := 3;
			std_rx_word_aligner_rgnumber    : integer := 3;
			std_rx_run_length_val           : integer := 31;
			std_tx_bitrev_enable            : integer := 0;
			std_rx_bitrev_enable            : integer := 0;
			std_tx_byterev_enable           : integer := 0;
			std_rx_byterev_enable           : integer := 0;
			std_tx_polinv_enable            : integer := 0;
			std_rx_polinv_enable            : integer := 0
		);
		port (
			rx_analogreset            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_analogreset
			rx_digitalreset           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_digitalreset
			rx_cdr_refclk             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_cdr_refclk
			rx_pma_clkout             : out std_logic_vector(0 downto 0);                     -- rx_pma_clkout
			rx_serial_data            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_serial_data
			rx_set_locktodata         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_set_locktodata
			rx_set_locktoref          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_set_locktoref
			rx_is_lockedtoref         : out std_logic_vector(0 downto 0);                     -- rx_is_lockedtoref
			rx_is_lockedtodata        : out std_logic_vector(0 downto 0);                     -- rx_is_lockedtodata
			rx_parallel_data          : out std_logic_vector(63 downto 0);                    -- rx_parallel_data
			rx_std_coreclkin          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_coreclkin
			rx_std_clkout             : out std_logic_vector(0 downto 0);                     -- rx_std_clkout
			rx_cal_busy               : out std_logic_vector(0 downto 0);                     -- rx_cal_busy
			reconfig_to_xcvr          : in  std_logic_vector(69 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			reconfig_from_xcvr        : out std_logic_vector(45 downto 0);                    -- reconfig_from_xcvr
			pll_powerdown             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- pll_powerdown
			tx_analogreset            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_analogreset
			tx_digitalreset           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_digitalreset
			tx_pll_refclk             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_pll_refclk
			tx_pma_clkout             : out std_logic_vector(0 downto 0);                     -- tx_pma_clkout
			tx_serial_data            : out std_logic_vector(0 downto 0);                     -- tx_serial_data
			tx_pma_parallel_data      : in  std_logic_vector(79 downto 0) := (others => 'X'); -- tx_pma_parallel_data
			pll_locked                : out std_logic_vector(0 downto 0);                     -- pll_locked
			ext_pll_clk               : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- ext_pll_clk
			rx_pma_parallel_data      : out std_logic_vector(79 downto 0);                    -- rx_pma_parallel_data
			rx_clkslip                : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_clkslip
			rx_clklow                 : out std_logic_vector(0 downto 0);                     -- rx_clklow
			rx_fref                   : out std_logic_vector(0 downto 0);                     -- rx_fref
			rx_seriallpbken           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_seriallpbken
			rx_signaldetect           : out std_logic_vector(0 downto 0);                     -- rx_signaldetect
			tx_parallel_data          : in  std_logic_vector(43 downto 0) := (others => 'X'); -- tx_parallel_data
			tx_std_coreclkin          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_std_coreclkin
			tx_std_clkout             : out std_logic_vector(0 downto 0);                     -- tx_std_clkout
			rx_std_prbs_done          : out std_logic_vector(0 downto 0);                     -- rx_std_prbs_done
			rx_std_prbs_err           : out std_logic_vector(0 downto 0);                     -- rx_std_prbs_err
			tx_std_pcfifo_full        : out std_logic_vector(0 downto 0);                     -- tx_std_pcfifo_full
			tx_std_pcfifo_empty       : out std_logic_vector(0 downto 0);                     -- tx_std_pcfifo_empty
			rx_std_pcfifo_full        : out std_logic_vector(0 downto 0);                     -- rx_std_pcfifo_full
			rx_std_pcfifo_empty       : out std_logic_vector(0 downto 0);                     -- rx_std_pcfifo_empty
			rx_std_byteorder_ena      : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_byteorder_ena
			rx_std_byteorder_flag     : out std_logic_vector(0 downto 0);                     -- rx_std_byteorder_flag
			rx_std_rmfifo_full        : out std_logic_vector(0 downto 0);                     -- rx_std_rmfifo_full
			rx_std_rmfifo_empty       : out std_logic_vector(0 downto 0);                     -- rx_std_rmfifo_empty
			rx_std_wa_patternalign    : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_wa_patternalign
			rx_std_wa_a1a2size        : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_wa_a1a2size
			tx_std_bitslipboundarysel : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- tx_std_bitslipboundarysel
			rx_std_bitslipboundarysel : out std_logic_vector(4 downto 0);                     -- rx_std_bitslipboundarysel
			rx_std_bitslip            : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_bitslip
			rx_std_runlength_err      : out std_logic_vector(0 downto 0);                     -- rx_std_runlength_err
			rx_std_bitrev_ena         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_bitrev_ena
			rx_std_byterev_ena        : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_byterev_ena
			tx_std_polinv             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_std_polinv
			rx_std_polinv             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- rx_std_polinv
			tx_std_elecidle           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- tx_std_elecidle
			rx_std_signaldetect       : out std_logic_vector(0 downto 0);                     -- rx_std_signaldetect
			tx_cal_busy               : out std_logic_vector(0 downto 0)                      -- tx_cal_busy
		);
	end component altera_xcvr_native_av;

	component altera_xcvr_reset_control is
		generic (
			CHANNELS              : integer := 1;
			PLLS                  : integer := 1;
			SYS_CLK_IN_MHZ        : integer := 250;
			SYNCHRONIZE_RESET     : integer := 1;
			REDUCED_SIM_TIME      : integer := 1;
			TX_PLL_ENABLE         : integer := 1;
			T_PLL_POWERDOWN       : integer := 1000;
			SYNCHRONIZE_PLL_RESET : integer := 0;
			TX_ENABLE             : integer := 1;
			TX_PER_CHANNEL        : integer := 0;
			T_TX_DIGITALRESET     : integer := 20;
			T_PLL_LOCK_HYST       : integer := 0;
			EN_PLL_CAL_BUSY       : integer := 0;
			RX_ENABLE             : integer := 1;
			RX_PER_CHANNEL        : integer := 0;
			T_RX_ANALOGRESET      : integer := 40;
			T_RX_DIGITALRESET     : integer := 4000
		);
		port (
			clock              : in  std_logic                    := 'X';             -- clk
			reset              : in  std_logic                    := 'X';             -- reset
			rx_analogreset     : out std_logic_vector(0 downto 0);                    -- rx_analogreset
			rx_digitalreset    : out std_logic_vector(0 downto 0);                    -- rx_digitalreset
			rx_ready           : out std_logic_vector(0 downto 0);                    -- rx_ready
			rx_is_lockedtodata : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_is_lockedtodata
			rx_cal_busy        : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_cal_busy
			rx_manual          : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_reset_mode
			pll_powerdown      : out std_logic_vector(0 downto 0);                    -- pll_powerdown
			tx_analogreset     : out std_logic_vector(0 downto 0);                    -- tx_analogreset
			tx_digitalreset    : out std_logic_vector(0 downto 0);                    -- tx_digitalreset
			tx_ready           : out std_logic_vector(0 downto 0);                    -- tx_ready
			pll_locked         : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_locked
			pll_select         : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_select
			tx_cal_busy        : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_cal_busy
			pll_cal_busy       : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_cal_busy
			tx_manual          : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_reset_mode
			tx_digitalreset_or : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_digitalreset_or
			rx_digitalreset_or : in  std_logic_vector(0 downto 0) := (others => 'X')  -- rx_digitalreset_or
		);
	end component altera_xcvr_reset_control;

	component sdi_ii_rx_protocol is
		generic (
			FAMILY               : string  := "STRATIX V";
			VIDEO_STANDARD       : string  := "hd";
			SD_BIT_WIDTH         : integer := 10;
			RX_INC_ERR_TOLERANCE : integer := 0;
			RX_CRC_ERROR_OUTPUT  : integer := 0;
			RX_EN_VPID_EXTRACT   : integer := 0;
			RX_EN_A2B_CONV       : integer := 0;
			RX_EN_B2A_CONV       : integer := 0;
			IS_RTL_SIM           : integer := 0
		);
		port (
			rx_clkin                 : in  std_logic                     := 'X';             -- clk
			rx_clkout                : out std_logic;                                        -- clk
			rx_rst_proto_in          : in  std_logic                     := 'X';             -- export
			rx_datain                : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			rx_datain_valid          : in  std_logic                     := 'X';             -- export
			rx_dataout               : out std_logic_vector(19 downto 0);                    -- export
			rx_dataout_valid         : out std_logic;                                        -- export
			rx_f                     : out std_logic_vector(0 downto 0);                     -- export
			rx_v                     : out std_logic_vector(0 downto 0);                     -- export
			rx_h                     : out std_logic_vector(0 downto 0);                     -- export
			rx_ap                    : out std_logic_vector(0 downto 0);                     -- export
			rx_format                : out std_logic_vector(4 downto 0);                     -- export
			rx_align_locked          : out std_logic;                                        -- export
			rx_trs_locked            : out std_logic_vector(0 downto 0);                     -- export
			rx_frame_locked          : out std_logic;                                        -- export
			rx_ln                    : out std_logic_vector(10 downto 0);                    -- export
			rx_eav                   : out std_logic_vector(0 downto 0);                     -- export
			rx_trs                   : out std_logic_vector(0 downto 0);                     -- export
			rx_trs_loose_lock_out    : out std_logic_vector(0 downto 0);                     -- export
			rx_clkin_b               : in  std_logic                     := 'X';             -- clk
			rx_clkin_smpte372        : in  std_logic                     := 'X';             -- clk
			rx_clkout_b              : out std_logic;                                        -- clk
			rx_std_in                : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- export
			rx_std                   : out std_logic_vector(2 downto 0);                     -- export
			rx_crc_error_c           : out std_logic_vector(0 downto 0);                     -- export
			rx_crc_error_y           : out std_logic_vector(0 downto 0);                     -- export
			rx_crc_error_c_b         : out std_logic_vector(0 downto 0);                     -- export
			rx_crc_error_y_b         : out std_logic_vector(0 downto 0);                     -- export
			rx_ln_b                  : out std_logic_vector(10 downto 0);                    -- export
			rx_vpid_byte1            : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte2            : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte3            : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte4            : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_valid            : out std_logic_vector(0 downto 0);                     -- export
			rx_vpid_checksum_error   : out std_logic_vector(0 downto 0);                     -- export
			rx_line_f0               : out std_logic_vector(10 downto 0);                    -- export
			rx_line_f1               : out std_logic_vector(10 downto 0);                    -- export
			rx_vpid_byte1_b          : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte2_b          : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte3_b          : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_byte4_b          : out std_logic_vector(7 downto 0);                     -- export
			rx_vpid_valid_b          : out std_logic_vector(0 downto 0);                     -- export
			rx_vpid_checksum_error_b : out std_logic_vector(0 downto 0);                     -- export
			rx_rst_proto_in_b        : in  std_logic                     := 'X';             -- export
			rx_datain_b              : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			rx_datain_valid_b        : in  std_logic                     := 'X';             -- export
			rx_align_locked_b        : out std_logic;                                        -- export
			rx_trs_locked_b          : out std_logic;                                        -- export
			rx_frame_locked_b        : out std_logic;                                        -- export
			rx_trs_loose_lock_out_b  : out std_logic;                                        -- export
			rx_dl_locked             : out std_logic;                                        -- export
			rx_dataout_b             : out std_logic_vector(19 downto 0);                    -- export
			rx_dataout_valid_b       : out std_logic                                         -- export
		);
	end component sdi_ii_rx_protocol;

	component sdi_ii_rx_phy_mgmt is
		generic (
			FAMILY               : string  := "STRATIX V";
			VIDEO_STANDARD       : string  := "hd";
			SD_BIT_WIDTH         : integer := 10;
			DIRECTION            : string  := "du";
			TRANSCEIVER_PROTOCOL : string  := "xcvr_proto";
			HD_FREQ              : string  := "148.5";
			IS_RTL_SIM           : integer := 0
		);
		port (
			xcvr_rxclk              : in  std_logic                     := 'X';             -- clk
			rx_coreclk              : in  std_logic                     := 'X';             -- clk
			rx_clkout               : out std_logic;                                        -- clk
			rx_rst                  : in  std_logic                     := 'X';             -- reset
			rx_trs_loose_lock_in    : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- export
			rx_datain               : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			rx_rst_proto_out        : out std_logic;                                        -- export
			rx_dataout              : out std_logic_vector(19 downto 0);                    -- export
			rx_dataout_valid        : out std_logic;                                        -- export
			rx_coreclk_is_ntsc_paln : in  std_logic                     := 'X';             -- export
			rx_clkout_is_ntsc_paln  : out std_logic;                                        -- export
			rx_pll_locked           : in  std_logic                     := 'X';             -- export
			gxb_ltr                 : out std_logic;                                        -- export
			gxb_ltd                 : out std_logic;                                        -- export
			trig_rst_ctrl           : out std_logic;                                        -- export
			rx_ready                : in  std_logic                     := 'X';             -- export
			rx_coreclk_hd           : in  std_logic                     := 'X';             -- clk
			xcvr_rxclk_b            : in  std_logic                     := 'X';             -- clk
			rx_clkout_b             : out std_logic;                                        -- clk
			rx_sdi_start_reconfig   : out std_logic;                                        -- export
			rx_sdi_reconfig_done    : in  std_logic                     := 'X';             -- export
			rx_std                  : out std_logic_vector(2 downto 0);                     -- export
			rx_trs_loose_lock_in_b  : in  std_logic                     := 'X';             -- export
			rx_datain_b             : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			rx_rst_proto_out_b      : out std_logic;                                        -- export
			rx_dataout_b            : out std_logic_vector(19 downto 0);                    -- export
			rx_dataout_valid_b      : out std_logic;                                        -- export
			rx_pll_locked_b         : in  std_logic                     := 'X';             -- export
			trig_rst_ctrl_b         : out std_logic;                                        -- export
			gxb_ltr_b               : out std_logic;                                        -- export
			gxb_ltd_b               : out std_logic;                                        -- export
			rx_ready_b              : in  std_logic                     := 'X'              -- export
		);
	end component sdi_ii_rx_phy_mgmt;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal u_phy_adapter_xcvr_rxclk_clk                              : std_logic;                     -- u_phy_adapter:xcvr_rxclk -> u_rx_phy_mgmt:xcvr_rxclk
	signal u_phy_adapter_xcvr_rx_dataout_export                      : std_logic_vector(19 downto 0); -- u_phy_adapter:xcvr_rx_dataout -> u_rx_phy_mgmt:rx_datain
	signal u_phy_adapter_rx_pll_locked_export                        : std_logic;                     -- u_phy_adapter:rx_pll_locked -> [rx_pll_locked, u_rx_phy_mgmt:rx_pll_locked]
	signal u_phy_adapter_xcvr_rx_ready_export                        : std_logic;                     -- u_phy_adapter:xcvr_rx_ready -> u_rx_phy_mgmt:rx_ready
	signal u_rx_phy_mgmt_gxb_ltr_export                              : std_logic;                     -- u_rx_phy_mgmt:gxb_ltr -> u_phy_adapter:rx_set_locktoref
	signal u_rx_phy_mgmt_gxb_ltd_export                              : std_logic;                     -- u_rx_phy_mgmt:gxb_ltd -> u_phy_adapter:rx_set_locktodata
	signal u_rx_phy_mgmt_trig_rst_ctrl_export                        : std_logic;                     -- u_rx_phy_mgmt:trig_rst_ctrl -> u_phy_adapter:trig_rst_ctrl
	signal rx_rst_coreclk_sync_reset_out_reset                       : std_logic;                     -- rx_rst_coreclk_sync:reset_out -> u_rx_phy_mgmt:rx_rst
	signal u_rx_protocol_rx_trs_loose_lock_out_export                : std_logic_vector(0 downto 0);  -- u_rx_protocol:rx_trs_loose_lock_out -> u_rx_phy_mgmt:rx_trs_loose_lock_in
	signal u_rx_phy_mgmt_rx_rst_proto_out_export                     : std_logic;                     -- u_rx_phy_mgmt:rx_rst_proto_out -> [rx_rst_proto_out, u_rx_protocol:rx_rst_proto_in]
	signal u_rx_phy_mgmt_rx_clkout_clk                               : std_logic;                     -- u_rx_phy_mgmt:rx_clkout -> u_rx_protocol:rx_clkin
	signal u_rx_phy_mgmt_rx_dataout_export                           : std_logic_vector(19 downto 0); -- u_rx_phy_mgmt:rx_dataout -> u_rx_protocol:rx_datain
	signal u_rx_phy_mgmt_rx_dataout_valid_export                     : std_logic;                     -- u_rx_phy_mgmt:rx_dataout_valid -> u_rx_protocol:rx_datain_valid
	signal u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset           : std_logic_vector(0 downto 0);  -- u_rx_phy_rst_ctrl:rx_analogreset -> u_phy:rx_analogreset
	signal u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset         : std_logic_vector(0 downto 0);  -- u_rx_phy_rst_ctrl:rx_digitalreset -> u_phy:rx_digitalreset
	signal u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata   : std_logic;                     -- u_phy_adapter:rx_locked_to_xcvr_ctrl -> u_rx_phy_rst_ctrl:rx_is_lockedtodata
	signal u_phy_rx_cal_busy_rx_cal_busy                             : std_logic_vector(0 downto 0);  -- u_phy:rx_cal_busy -> u_rx_phy_rst_ctrl:rx_cal_busy
	signal u_rx_phy_rst_ctrl_rx_ready_rx_ready                       : std_logic_vector(0 downto 0);  -- u_rx_phy_rst_ctrl:rx_ready -> u_phy_adapter:rx_ready_from_xcvr
	signal u_phy_adapter_rx_manual_rx_reset_mode                     : std_logic;                     -- u_phy_adapter:rx_manual -> u_rx_phy_rst_ctrl:rx_manual
	signal u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr      : std_logic_vector(69 downto 0); -- u_phy_adapter:xcvr_reconfig_to_xcvr -> u_phy:reconfig_to_xcvr
	signal u_phy_reconfig_from_xcvr_reconfig_from_xcvr               : std_logic_vector(45 downto 0); -- u_phy:reconfig_from_xcvr -> u_phy_adapter:xcvr_reconfig_from_xcvr
	signal u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk                 : std_logic;                     -- u_phy_adapter:rx_cdr_refclk -> u_phy:rx_cdr_refclk
	signal u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin           : std_logic;                     -- u_phy_adapter:rx_std_coreclkin -> u_phy:rx_std_coreclkin
	signal u_phy_rx_std_clkout_rx_std_clkout                         : std_logic_vector(0 downto 0);  -- u_phy:rx_std_clkout -> u_phy_adapter:rxclk_from_xcvr
	signal u_phy_rx_pma_clkout_rx_pma_clkout                         : std_logic_vector(0 downto 0);  -- u_phy:rx_pma_clkout -> u_phy_adapter:rx_pma_clkout
	signal u_phy_rx_parallel_data_rx_parallel_data                   : std_logic_vector(63 downto 0); -- u_phy:rx_parallel_data -> u_phy_adapter:rx_dataout_from_xcvr
	signal u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data               : std_logic;                     -- u_phy_adapter:sdi_rx_to_xcvr -> u_phy:rx_serial_data
	signal u_phy_rx_is_lockedtoref_rx_is_lockedtoref                 : std_logic_vector(0 downto 0);  -- u_phy:rx_is_lockedtoref -> u_phy_adapter:xcvr_rx_is_lockedtoref
	signal u_phy_rx_is_lockedtodata_rx_is_lockedtodata               : std_logic_vector(0 downto 0);  -- u_phy:rx_is_lockedtodata -> u_phy_adapter:xcvr_rx_is_lockedtodata
	signal u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata : std_logic;                     -- u_phy_adapter:rx_set_locktodata_to_xcvr -> u_phy:rx_set_locktodata
	signal u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref   : std_logic;                     -- u_phy_adapter:rx_set_locktoref_to_xcvr -> u_phy:rx_set_locktoref
	signal rst_controller_reset_out_reset                            : std_logic;                     -- rst_controller:reset_out -> u_rx_phy_rst_ctrl:reset
	signal u_phy_adapter_reset_to_xcvr_rst_ctrl_reset                : std_logic;                     -- u_phy_adapter:reset_to_xcvr_rst_ctrl -> rst_controller:reset_in0

begin

	family_check : if FAMILY /= "Cyclone V" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	video_standard_check : if VIDEO_STANDARD /= "hd" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	sd_bit_width_check : if SD_BIT_WIDTH /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	direction_check : if DIRECTION /= "rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	transceiver_protocol_check : if TRANSCEIVER_PROTOCOL /= "xcvr_proto" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hd_freq_check : if HD_FREQ /= "148.5" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	xcvr_tx_pll_sel_check : if XCVR_TX_PLL_SEL /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_inc_err_tolerance_check : if RX_INC_ERR_TOLERANCE /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_crc_error_output_check : if RX_CRC_ERROR_OUTPUT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_vpid_extract_check : if RX_EN_VPID_EXTRACT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_a2b_conv_check : if RX_EN_A2B_CONV /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_b2a_conv_check : if RX_EN_B2A_CONV /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	tx_en_vpid_insert_check : if TX_EN_VPID_INSERT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	is_rtl_sim_check : if IS_RTL_SIM /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	u_phy_adapter : component sdi_ii_phy_adapter
		generic map (
			FAMILY            => "Cyclone V",
			VIDEO_STANDARD    => "hd",
			DIRECTION         => "rx",
			XCVR_TX_PLL_SEL   => 0,
			ED_TXPLL_SWITCH   => 0,
			XCVR_RST_CTRL_CHS => 1
		)
		port map (
			xcvr_refclk                 => xcvr_refclk,                                                              --               xcvr_refclk.clk
			xcvr_rxclk                  => u_phy_adapter_xcvr_rxclk_clk,                                             --                xcvr_rxclk.clk
			reset_to_xcvr_rst_ctrl      => u_phy_adapter_reset_to_xcvr_rst_ctrl_reset,                               --    reset_to_xcvr_rst_ctrl.reset
			reconfig_from_xcvr          => reconfig_from_xcvr,                                                       --        reconfig_from_xcvr.reconfig_from_xcvr
			reconfig_to_xcvr            => reconfig_to_xcvr,                                                         --          reconfig_to_xcvr.reconfig_to_xcvr
			xcvr_reconfig_from_xcvr     => u_phy_reconfig_from_xcvr_reconfig_from_xcvr,                              --   xcvr_reconfig_from_xcvr.reconfig_from_xcvr
			xcvr_reconfig_to_xcvr       => u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr,                     --     xcvr_reconfig_to_xcvr.reconfig_to_xcvr
			rx_std_coreclkin            => u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin,                          --          rx_std_coreclkin.rx_std_coreclkin
			rx_pma_clkout               => u_phy_rx_pma_clkout_rx_pma_clkout(0),                                     --             rx_pma_clkout.rx_pma_clkout
			trig_rst_ctrl               => u_rx_phy_mgmt_trig_rst_ctrl_export,                                       --             trig_rst_ctrl.export
			sdi_rx                      => sdi_rx,                                                                   --                    sdi_rx.export
			rx_set_locktodata           => u_rx_phy_mgmt_gxb_ltd_export,                                             --         rx_set_locktodata.export
			sdi_rx_to_xcvr              => u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data,                              --            sdi_rx_to_xcvr.rx_serial_data
			rx_set_locktodata_to_xcvr   => u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata,                -- rx_set_locktodata_to_xcvr.rx_set_locktodata
			rx_set_locktoref_to_xcvr    => u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref,                  --  rx_set_locktoref_to_xcvr.rx_set_locktoref
			rx_pll_locked               => u_phy_adapter_rx_pll_locked_export,                                       --             rx_pll_locked.export
			rx_dataout_from_xcvr        => u_phy_rx_parallel_data_rx_parallel_data,                                  --      rx_dataout_from_xcvr.rx_parallel_data
			xcvr_rx_is_lockedtoref      => u_phy_rx_is_lockedtoref_rx_is_lockedtoref(0),                             --    xcvr_rx_is_lockedtoref.rx_is_lockedtoref
			xcvr_rx_is_lockedtodata     => u_phy_rx_is_lockedtodata_rx_is_lockedtodata(0),                           --   xcvr_rx_is_lockedtodata.rx_is_lockedtodata
			xcvr_rx_dataout             => u_phy_adapter_xcvr_rx_dataout_export,                                     --           xcvr_rx_dataout.export
			xcvr_rx_ready               => u_phy_adapter_xcvr_rx_ready_export,                                       --             xcvr_rx_ready.export
			rx_cdr_refclk               => u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk,                                --             rx_cdr_refclk.rx_cdr_refclk
			rx_set_locktoref            => u_rx_phy_mgmt_gxb_ltr_export,                                             --          rx_set_locktoref.export
			rxclk_from_xcvr             => u_phy_rx_std_clkout_rx_std_clkout(0),                                     --           rxclk_from_xcvr.rx_std_clkout
			rx_locked_to_xcvr_ctrl      => u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata,                  --    rx_locked_to_xcvr_ctrl.rx_is_lockedtodata
			rx_manual                   => u_phy_adapter_rx_manual_rx_reset_mode,                                    --                 rx_manual.rx_reset_mode
			rx_ready_from_xcvr          => u_rx_phy_rst_ctrl_rx_ready_rx_ready(0),                                   --        rx_ready_from_xcvr.rx_ready
			xcvr_refclk_alt             => '0',                                                                      --               (terminated)
			tx_pclk                     => '0',                                                                      --               (terminated)
			reconfig_clk_in             => '0',                                                                      --               (terminated)
			tx_clkout                   => open,                                                                     --               (terminated)
			xcvr_rxclk_b                => open,                                                                     --               (terminated)
			reconfig_rst_in             => '0',                                                                      --               (terminated)
			reset_to_xcvr_rst_ctrl_b    => open,                                                                     --               (terminated)
			reconfig_from_xcvr_b        => open,                                                                     --               (terminated)
			reconfig_to_xcvr_b          => "0000000000000000000000000000000000000000000000000000000000000000000000", --               (terminated)
			xcvr_reconfig_from_xcvr_b   => "0000000000000000000000000000000000000000000000",                         --               (terminated)
			xcvr_reconfig_to_xcvr_b     => open,                                                                     --               (terminated)
			xcvr_refclk_sel             => '0',                                                                      --               (terminated)
			tx_pll_locked_alt           => open,                                                                     --               (terminated)
			tx_pll_refclk               => open,                                                                     --               (terminated)
			tx_std_coreclkin            => open,                                                                     --               (terminated)
			sdi_tx_from_xcvr            => '0',                                                                      --               (terminated)
			tx_pll_locked_from_xcvr     => '0',                                                                      --               (terminated)
			sdi_tx                      => open,                                                                     --               (terminated)
			tx_pll_locked               => open,                                                                     --               (terminated)
			tx_pll_refclk_b             => open,                                                                     --               (terminated)
			tx_std_coreclkin_b          => open,                                                                     --               (terminated)
			sdi_tx_from_xcvr_b          => '0',                                                                      --               (terminated)
			sdi_tx_b                    => open,                                                                     --               (terminated)
			rx_std_coreclkin_b          => open,                                                                     --               (terminated)
			rx_pma_clkout_b             => '0',                                                                      --               (terminated)
			trig_rst_ctrl_b             => '0',                                                                      --               (terminated)
			sdi_rx_b                    => '0',                                                                      --               (terminated)
			rx_set_locktodata_b         => '0',                                                                      --               (terminated)
			sdi_rx_to_xcvr_b            => open,                                                                     --               (terminated)
			rx_set_locktodata_to_xcvr_b => open,                                                                     --               (terminated)
			rx_set_locktoref_to_xcvr_b  => open,                                                                     --               (terminated)
			rx_pll_locked_b             => open,                                                                     --               (terminated)
			reconfig_clk_out            => open,                                                                     --               (terminated)
			reconfig_rst_out            => open,                                                                     --               (terminated)
			xcvr_tx_datain              => "00000000000000000000",                                                   --               (terminated)
			tx_datain_to_xcvr           => open,                                                                     --               (terminated)
			tx_pll_select_to_xcvr_rst   => open,                                                                     --               (terminated)
			tx_serial_clk_out           => open,                                                                     --               (terminated)
			tx_serial_clk_alt_out       => open,                                                                     --               (terminated)
			pll_powerdown_in            => "00",                                                                     --               (terminated)
			pll_powerdown_out           => open,                                                                     --               (terminated)
			pll_powerdown_out_b         => open,                                                                     --               (terminated)
			pll_locked_in               => '0',                                                                      --               (terminated)
			pll_locked_in_b             => '0',                                                                      --               (terminated)
			pll_locked_out              => open,                                                                     --               (terminated)
			tx_cal_busy_in              => '0',                                                                      --               (terminated)
			pll_cal_busy_in             => '0',                                                                      --               (terminated)
			pll_cal_busy_in_alt         => '0',                                                                      --               (terminated)
			xcvr_tx_datain_b            => "00000000000000000000",                                                   --               (terminated)
			tx_datain_to_xcvr_b         => open,                                                                     --               (terminated)
			tx_analogreset_in           => "00",                                                                     --               (terminated)
			tx_analogreset_out          => open,                                                                     --               (terminated)
			tx_analogreset_out_b        => open,                                                                     --               (terminated)
			tx_digitalreset_in          => "00",                                                                     --               (terminated)
			tx_digitalreset_out         => open,                                                                     --               (terminated)
			tx_digitalreset_out_b       => open,                                                                     --               (terminated)
			tx_cal_busy_in_b            => '0',                                                                      --               (terminated)
			tx_pll_select_to_xcvr_rst_b => open,                                                                     --               (terminated)
			xcvr_tx_ready_b             => '0',                                                                      --               (terminated)
			rx_dataout_from_xcvr_b      => "0000000000000000000000000000000000000000000000000000000000000000",       --               (terminated)
			xcvr_rx_is_lockedtoref_b    => '0',                                                                      --               (terminated)
			xcvr_rx_is_lockedtodata_b   => '0',                                                                      --               (terminated)
			xcvr_rx_dataout_b           => open,                                                                     --               (terminated)
			rx_analogreset_in           => "00",                                                                     --               (terminated)
			rx_analogreset_out          => open,                                                                     --               (terminated)
			rx_analogreset_out_b        => open,                                                                     --               (terminated)
			rx_digitalreset_in          => "00",                                                                     --               (terminated)
			rx_digitalreset_out         => open,                                                                     --               (terminated)
			rx_digitalreset_out_b       => open,                                                                     --               (terminated)
			rx_cal_busy_in              => '0',                                                                      --               (terminated)
			rx_cal_busy_in_b            => '0',                                                                      --               (terminated)
			rx_cal_busy_out             => open,                                                                     --               (terminated)
			rx_locked_to_xcvr_ctrl_b    => open,                                                                     --               (terminated)
			rx_manual_b                 => open,                                                                     --               (terminated)
			rx_ready_from_xcvr_b        => '0',                                                                      --               (terminated)
			tx_serial_clk_in            => '0',                                                                      --               (terminated)
			tx_serial_clk_alt_in        => '0',                                                                      --               (terminated)
			xcvr_rx_ready_b             => open,                                                                     --               (terminated)
			tx_clkout_from_xcvr         => '0',                                                                      --               (terminated)
			tx_clkout_from_xcvr_b       => '0',                                                                      --               (terminated)
			rx_cdr_refclk_b             => open,                                                                     --               (terminated)
			rxclk_from_xcvr_b           => '0',                                                                      --               (terminated)
			rx_set_locktoref_b          => '0',                                                                      --               (terminated)
			xcvr_tx_ready               => '0',                                                                      --               (terminated)
			tx_cal_busy_out             => open                                                                      --               (terminated)
		);

	u_phy : component altera_xcvr_native_av
		generic map (
			tx_enable                       => 0,
			rx_enable                       => 1,
			enable_std                      => 1,
			data_path_select                => "standard",
			channels                        => 1,
			bonded_mode                     => "non_bonded",
			data_rate                       => "1485 Mbps",
			pma_width                       => 10,
			tx_pma_clk_div                  => 2,
			pll_reconfig_enable             => 0,
			pll_external_enable             => 0,
			pll_data_rate                   => "2970 Mbps",
			pll_type                        => "CMU",
			pma_bonding_mode                => "x1",
			plls                            => 1,
			pll_select                      => 0,
			pll_refclk_cnt                  => 1,
			pll_refclk_select               => "0",
			pll_refclk_freq                 => "unused",
			pll_feedback_path               => "internal",
			cdr_reconfig_enable             => 0,
			cdr_refclk_cnt                  => 1,
			cdr_refclk_select               => 0,
			cdr_refclk_freq                 => "148.5 MHz",
			rx_ppm_detect_threshold         => "1000",
			rx_clkslip_enable               => 0,
			std_protocol_hint               => "basic",
			std_pcs_pma_width               => 10,
			std_low_latency_bypass_enable   => 0,
			std_tx_pcfifo_mode              => "low_latency",
			std_rx_pcfifo_mode              => "low_latency",
			std_rx_byte_order_enable        => 0,
			std_rx_byte_order_mode          => "manual",
			std_rx_byte_order_width         => 10,
			std_rx_byte_order_symbol_count  => 1,
			std_rx_byte_order_pattern       => "0",
			std_rx_byte_order_pad           => "0",
			std_tx_byte_ser_enable          => 1,
			std_rx_byte_deser_enable        => 1,
			std_tx_8b10b_enable             => 0,
			std_tx_8b10b_disp_ctrl_enable   => 0,
			std_rx_8b10b_enable             => 0,
			std_rx_rmfifo_enable            => 0,
			std_rx_rmfifo_pattern_p         => "00000",
			std_rx_rmfifo_pattern_n         => "00000",
			std_tx_bitslip_enable           => 0,
			std_rx_word_aligner_mode        => "bit_slip",
			std_rx_word_aligner_pattern_len => 7,
			std_rx_word_aligner_pattern     => "0000000000",
			std_rx_word_aligner_rknumber    => 3,
			std_rx_word_aligner_renumber    => 3,
			std_rx_word_aligner_rgnumber    => 3,
			std_rx_run_length_val           => 31,
			std_tx_bitrev_enable            => 0,
			std_rx_bitrev_enable            => 0,
			std_tx_byterev_enable           => 0,
			std_rx_byterev_enable           => 0,
			std_tx_polinv_enable            => 0,
			std_rx_polinv_enable            => 0
		)
		port map (
			rx_analogreset            => u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset,                                    --     rx_analogreset.rx_analogreset
			rx_digitalreset           => u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset,                                  --    rx_digitalreset.rx_digitalreset
			rx_cdr_refclk(0)          => u_phy_adapter_rx_cdr_refclk_rx_cdr_refclk,                                          --      rx_cdr_refclk.rx_cdr_refclk
			rx_pma_clkout             => u_phy_rx_pma_clkout_rx_pma_clkout,                                                  --      rx_pma_clkout.rx_pma_clkout
			rx_serial_data(0)         => u_phy_adapter_sdi_rx_to_xcvr_rx_serial_data,                                        --     rx_serial_data.rx_serial_data
			rx_set_locktodata(0)      => u_phy_adapter_rx_set_locktodata_to_xcvr_rx_set_locktodata,                          --  rx_set_locktodata.rx_set_locktodata
			rx_set_locktoref(0)       => u_phy_adapter_rx_set_locktoref_to_xcvr_rx_set_locktoref,                            --   rx_set_locktoref.rx_set_locktoref
			rx_is_lockedtoref         => u_phy_rx_is_lockedtoref_rx_is_lockedtoref,                                          --  rx_is_lockedtoref.rx_is_lockedtoref
			rx_is_lockedtodata        => u_phy_rx_is_lockedtodata_rx_is_lockedtodata,                                        -- rx_is_lockedtodata.rx_is_lockedtodata
			rx_parallel_data          => u_phy_rx_parallel_data_rx_parallel_data,                                            --   rx_parallel_data.rx_parallel_data
			rx_std_coreclkin(0)       => u_phy_adapter_rx_std_coreclkin_rx_std_coreclkin,                                    --   rx_std_coreclkin.rx_std_coreclkin
			rx_std_clkout             => u_phy_rx_std_clkout_rx_std_clkout,                                                  --      rx_std_clkout.rx_std_clkout
			rx_cal_busy               => u_phy_rx_cal_busy_rx_cal_busy,                                                      --        rx_cal_busy.rx_cal_busy
			reconfig_to_xcvr          => u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr,                               --   reconfig_to_xcvr.reconfig_to_xcvr
			reconfig_from_xcvr        => u_phy_reconfig_from_xcvr_reconfig_from_xcvr,                                        -- reconfig_from_xcvr.reconfig_from_xcvr
			pll_powerdown             => "0",                                                                                --        (terminated)
			tx_analogreset            => "0",                                                                                --        (terminated)
			tx_digitalreset           => "0",                                                                                --        (terminated)
			tx_pll_refclk             => "0",                                                                                --        (terminated)
			tx_pma_clkout             => open,                                                                               --        (terminated)
			tx_serial_data            => open,                                                                               --        (terminated)
			tx_pma_parallel_data      => "00000000000000000000000000000000000000000000000000000000000000000000000000000000", --        (terminated)
			pll_locked                => open,                                                                               --        (terminated)
			ext_pll_clk               => "0",                                                                                --        (terminated)
			rx_pma_parallel_data      => open,                                                                               --        (terminated)
			rx_clkslip                => "0",                                                                                --        (terminated)
			rx_clklow                 => open,                                                                               --        (terminated)
			rx_fref                   => open,                                                                               --        (terminated)
			rx_seriallpbken           => "0",                                                                                --        (terminated)
			rx_signaldetect           => open,                                                                               --        (terminated)
			tx_parallel_data          => "00000000000000000000000000000000000000000000",                                     --        (terminated)
			tx_std_coreclkin          => "0",                                                                                --        (terminated)
			tx_std_clkout             => open,                                                                               --        (terminated)
			rx_std_prbs_done          => open,                                                                               --        (terminated)
			rx_std_prbs_err           => open,                                                                               --        (terminated)
			tx_std_pcfifo_full        => open,                                                                               --        (terminated)
			tx_std_pcfifo_empty       => open,                                                                               --        (terminated)
			rx_std_pcfifo_full        => open,                                                                               --        (terminated)
			rx_std_pcfifo_empty       => open,                                                                               --        (terminated)
			rx_std_byteorder_ena      => "0",                                                                                --        (terminated)
			rx_std_byteorder_flag     => open,                                                                               --        (terminated)
			rx_std_rmfifo_full        => open,                                                                               --        (terminated)
			rx_std_rmfifo_empty       => open,                                                                               --        (terminated)
			rx_std_wa_patternalign    => "0",                                                                                --        (terminated)
			rx_std_wa_a1a2size        => "0",                                                                                --        (terminated)
			tx_std_bitslipboundarysel => "00000",                                                                            --        (terminated)
			rx_std_bitslipboundarysel => open,                                                                               --        (terminated)
			rx_std_bitslip            => "0",                                                                                --        (terminated)
			rx_std_runlength_err      => open,                                                                               --        (terminated)
			rx_std_bitrev_ena         => "0",                                                                                --        (terminated)
			rx_std_byterev_ena        => "0",                                                                                --        (terminated)
			tx_std_polinv             => "0",                                                                                --        (terminated)
			rx_std_polinv             => "0",                                                                                --        (terminated)
			tx_std_elecidle           => "0",                                                                                --        (terminated)
			rx_std_signaldetect       => open,                                                                               --        (terminated)
			tx_cal_busy               => open                                                                                --        (terminated)
		);

	u_rx_phy_rst_ctrl : component altera_xcvr_reset_control
		generic map (
			CHANNELS              => 1,
			PLLS                  => 1,
			SYS_CLK_IN_MHZ        => 148,
			SYNCHRONIZE_RESET     => 0,
			REDUCED_SIM_TIME      => 0,
			TX_PLL_ENABLE         => 0,
			T_PLL_POWERDOWN       => 1000,
			SYNCHRONIZE_PLL_RESET => 0,
			TX_ENABLE             => 0,
			TX_PER_CHANNEL        => 0,
			T_TX_DIGITALRESET     => 20,
			T_PLL_LOCK_HYST       => 0,
			EN_PLL_CAL_BUSY       => 0,
			RX_ENABLE             => 1,
			RX_PER_CHANNEL        => 1,
			T_RX_ANALOGRESET      => 80,
			T_RX_DIGITALRESET     => 4000
		)
		port map (
			clock                 => rx_coreclk,                                              --              clock.clk
			reset                 => rst_controller_reset_out_reset,                          --              reset.reset
			rx_analogreset        => u_rx_phy_rst_ctrl_rx_analogreset_rx_analogreset,         --     rx_analogreset.rx_analogreset
			rx_digitalreset       => u_rx_phy_rst_ctrl_rx_digitalreset_rx_digitalreset,       --    rx_digitalreset.rx_digitalreset
			rx_ready              => u_rx_phy_rst_ctrl_rx_ready_rx_ready,                     --           rx_ready.rx_ready
			rx_is_lockedtodata(0) => u_phy_adapter_rx_locked_to_xcvr_ctrl_rx_is_lockedtodata, -- rx_is_lockedtodata.rx_is_lockedtodata
			rx_cal_busy           => u_phy_rx_cal_busy_rx_cal_busy,                           --        rx_cal_busy.rx_cal_busy
			rx_manual(0)          => u_phy_adapter_rx_manual_rx_reset_mode,                   --      rx_reset_mode.rx_reset_mode
			pll_powerdown         => open,                                                    --        (terminated)
			tx_analogreset        => open,                                                    --        (terminated)
			tx_digitalreset       => open,                                                    --        (terminated)
			tx_ready              => open,                                                    --        (terminated)
			pll_locked            => "0",                                                     --        (terminated)
			pll_select            => "0",                                                     --        (terminated)
			tx_cal_busy           => "0",                                                     --        (terminated)
			pll_cal_busy          => "0",                                                     --        (terminated)
			tx_manual             => "1",                                                     --        (terminated)
			tx_digitalreset_or    => "0",                                                     --        (terminated)
			rx_digitalreset_or    => "0"                                                      --        (terminated)
		);

	u_rx_protocol : component sdi_ii_rx_protocol
		generic map (
			FAMILY               => "Cyclone V",
			VIDEO_STANDARD       => "hd",
			SD_BIT_WIDTH         => 10,
			RX_INC_ERR_TOLERANCE => 0,
			RX_CRC_ERROR_OUTPUT  => 0,
			RX_EN_VPID_EXTRACT   => 0,
			RX_EN_A2B_CONV       => 0,
			RX_EN_B2A_CONV       => 0,
			IS_RTL_SIM           => 0
		)
		port map (
			rx_clkin                 => u_rx_phy_mgmt_rx_clkout_clk,                --              rx_clkin.clk
			rx_clkout                => rx_clkout,                                  --             rx_clkout.clk
			rx_rst_proto_in          => u_rx_phy_mgmt_rx_rst_proto_out_export,      --       rx_rst_proto_in.export
			rx_datain                => u_rx_phy_mgmt_rx_dataout_export,            --             rx_datain.export
			rx_datain_valid          => u_rx_phy_mgmt_rx_dataout_valid_export,      --       rx_datain_valid.export
			rx_dataout               => rx_dataout,                                 --            rx_dataout.export
			rx_dataout_valid         => rx_dataout_valid,                           --      rx_dataout_valid.export
			rx_f                     => rx_f,                                       --                  rx_f.export
			rx_v                     => rx_v,                                       --                  rx_v.export
			rx_h                     => rx_h,                                       --                  rx_h.export
			rx_ap                    => rx_ap,                                      --                 rx_ap.export
			rx_format                => rx_format,                                  --             rx_format.export
			rx_align_locked          => rx_align_locked,                            --       rx_align_locked.export
			rx_trs_locked            => rx_trs_locked,                              --         rx_trs_locked.export
			rx_frame_locked          => rx_frame_locked,                            --       rx_frame_locked.export
			rx_ln                    => rx_ln,                                      --                 rx_ln.export
			rx_eav                   => rx_eav,                                     --                rx_eav.export
			rx_trs                   => rx_trs,                                     --                rx_trs.export
			rx_trs_loose_lock_out    => u_rx_protocol_rx_trs_loose_lock_out_export, -- rx_trs_loose_lock_out.export
			rx_clkin_b               => '0',                                        --           (terminated)
			rx_clkin_smpte372        => '0',                                        --           (terminated)
			rx_clkout_b              => open,                                       --           (terminated)
			rx_std_in                => "000",                                      --           (terminated)
			rx_std                   => open,                                       --           (terminated)
			rx_crc_error_c           => open,                                       --           (terminated)
			rx_crc_error_y           => open,                                       --           (terminated)
			rx_crc_error_c_b         => open,                                       --           (terminated)
			rx_crc_error_y_b         => open,                                       --           (terminated)
			rx_ln_b                  => open,                                       --           (terminated)
			rx_vpid_byte1            => open,                                       --           (terminated)
			rx_vpid_byte2            => open,                                       --           (terminated)
			rx_vpid_byte3            => open,                                       --           (terminated)
			rx_vpid_byte4            => open,                                       --           (terminated)
			rx_vpid_valid            => open,                                       --           (terminated)
			rx_vpid_checksum_error   => open,                                       --           (terminated)
			rx_line_f0               => open,                                       --           (terminated)
			rx_line_f1               => open,                                       --           (terminated)
			rx_vpid_byte1_b          => open,                                       --           (terminated)
			rx_vpid_byte2_b          => open,                                       --           (terminated)
			rx_vpid_byte3_b          => open,                                       --           (terminated)
			rx_vpid_byte4_b          => open,                                       --           (terminated)
			rx_vpid_valid_b          => open,                                       --           (terminated)
			rx_vpid_checksum_error_b => open,                                       --           (terminated)
			rx_rst_proto_in_b        => '0',                                        --           (terminated)
			rx_datain_b              => "00000000000000000000",                     --           (terminated)
			rx_datain_valid_b        => '0',                                        --           (terminated)
			rx_align_locked_b        => open,                                       --           (terminated)
			rx_trs_locked_b          => open,                                       --           (terminated)
			rx_frame_locked_b        => open,                                       --           (terminated)
			rx_trs_loose_lock_out_b  => open,                                       --           (terminated)
			rx_dl_locked             => open,                                       --           (terminated)
			rx_dataout_b             => open,                                       --           (terminated)
			rx_dataout_valid_b       => open                                        --           (terminated)
		);

	u_rx_phy_mgmt : component sdi_ii_rx_phy_mgmt
		generic map (
			FAMILY               => "Cyclone V",
			VIDEO_STANDARD       => "hd",
			SD_BIT_WIDTH         => 10,
			DIRECTION            => "rx",
			TRANSCEIVER_PROTOCOL => "xcvr_proto",
			HD_FREQ              => "148.5",
			IS_RTL_SIM           => 0
		)
		port map (
			xcvr_rxclk              => u_phy_adapter_xcvr_rxclk_clk,               --              xcvr_rxclk.clk
			rx_coreclk              => rx_coreclk,                                 --              rx_coreclk.clk
			rx_clkout               => u_rx_phy_mgmt_rx_clkout_clk,                --               rx_clkout.clk
			rx_rst                  => rx_rst_coreclk_sync_reset_out_reset,        --                  rx_rst.reset
			rx_trs_loose_lock_in    => u_rx_protocol_rx_trs_loose_lock_out_export, --    rx_trs_loose_lock_in.export
			rx_datain               => u_phy_adapter_xcvr_rx_dataout_export,       --               rx_datain.export
			rx_rst_proto_out        => u_rx_phy_mgmt_rx_rst_proto_out_export,      --        rx_rst_proto_out.export
			rx_dataout              => u_rx_phy_mgmt_rx_dataout_export,            --              rx_dataout.export
			rx_dataout_valid        => u_rx_phy_mgmt_rx_dataout_valid_export,      --        rx_dataout_valid.export
			rx_coreclk_is_ntsc_paln => rx_coreclk_is_ntsc_paln,                    -- rx_coreclk_is_ntsc_paln.export
			rx_clkout_is_ntsc_paln  => rx_clkout_is_ntsc_paln,                     --  rx_clkout_is_ntsc_paln.export
			rx_pll_locked           => u_phy_adapter_rx_pll_locked_export,         --           rx_pll_locked.export
			gxb_ltr                 => u_rx_phy_mgmt_gxb_ltr_export,               --                 gxb_ltr.export
			gxb_ltd                 => u_rx_phy_mgmt_gxb_ltd_export,               --                 gxb_ltd.export
			trig_rst_ctrl           => u_rx_phy_mgmt_trig_rst_ctrl_export,         --           trig_rst_ctrl.export
			rx_ready                => u_phy_adapter_xcvr_rx_ready_export,         --                rx_ready.export
			rx_coreclk_hd           => '0',                                        --             (terminated)
			xcvr_rxclk_b            => '0',                                        --             (terminated)
			rx_clkout_b             => open,                                       --             (terminated)
			rx_sdi_start_reconfig   => open,                                       --             (terminated)
			rx_sdi_reconfig_done    => '0',                                        --             (terminated)
			rx_std                  => open,                                       --             (terminated)
			rx_trs_loose_lock_in_b  => '0',                                        --             (terminated)
			rx_datain_b             => "00000000000000000000",                     --             (terminated)
			rx_rst_proto_out_b      => open,                                       --             (terminated)
			rx_dataout_b            => open,                                       --             (terminated)
			rx_dataout_valid_b      => open,                                       --             (terminated)
			rx_pll_locked_b         => '0',                                        --             (terminated)
			trig_rst_ctrl_b         => open,                                       --             (terminated)
			gxb_ltr_b               => open,                                       --             (terminated)
			gxb_ltd_b               => open,                                       --             (terminated)
			rx_ready_b              => '0'                                         --             (terminated)
		);

	rx_rst_coreclk_sync : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => rx_rst,                              -- reset_in0.reset
			clk            => rx_coreclk,                          --       clk.clk
			reset_out      => rx_rst_coreclk_sync_reset_out_reset, -- reset_out.reset
			reset_req      => open,                                -- (terminated)
			reset_req_in0  => '0',                                 -- (terminated)
			reset_in1      => '0',                                 -- (terminated)
			reset_req_in1  => '0',                                 -- (terminated)
			reset_in2      => '0',                                 -- (terminated)
			reset_req_in2  => '0',                                 -- (terminated)
			reset_in3      => '0',                                 -- (terminated)
			reset_req_in3  => '0',                                 -- (terminated)
			reset_in4      => '0',                                 -- (terminated)
			reset_req_in4  => '0',                                 -- (terminated)
			reset_in5      => '0',                                 -- (terminated)
			reset_req_in5  => '0',                                 -- (terminated)
			reset_in6      => '0',                                 -- (terminated)
			reset_req_in6  => '0',                                 -- (terminated)
			reset_in7      => '0',                                 -- (terminated)
			reset_req_in7  => '0',                                 -- (terminated)
			reset_in8      => '0',                                 -- (terminated)
			reset_req_in8  => '0',                                 -- (terminated)
			reset_in9      => '0',                                 -- (terminated)
			reset_req_in9  => '0',                                 -- (terminated)
			reset_in10     => '0',                                 -- (terminated)
			reset_req_in10 => '0',                                 -- (terminated)
			reset_in11     => '0',                                 -- (terminated)
			reset_req_in11 => '0',                                 -- (terminated)
			reset_in12     => '0',                                 -- (terminated)
			reset_req_in12 => '0',                                 -- (terminated)
			reset_in13     => '0',                                 -- (terminated)
			reset_req_in13 => '0',                                 -- (terminated)
			reset_in14     => '0',                                 -- (terminated)
			reset_req_in14 => '0',                                 -- (terminated)
			reset_in15     => '0',                                 -- (terminated)
			reset_req_in15 => '0'                                  -- (terminated)
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => u_phy_adapter_reset_to_xcvr_rst_ctrl_reset, -- reset_in0.reset
			clk            => rx_coreclk,                                 --       clk.clk
			reset_out      => rst_controller_reset_out_reset,             -- reset_out.reset
			reset_req      => open,                                       -- (terminated)
			reset_req_in0  => '0',                                        -- (terminated)
			reset_in1      => '0',                                        -- (terminated)
			reset_req_in1  => '0',                                        -- (terminated)
			reset_in2      => '0',                                        -- (terminated)
			reset_req_in2  => '0',                                        -- (terminated)
			reset_in3      => '0',                                        -- (terminated)
			reset_req_in3  => '0',                                        -- (terminated)
			reset_in4      => '0',                                        -- (terminated)
			reset_req_in4  => '0',                                        -- (terminated)
			reset_in5      => '0',                                        -- (terminated)
			reset_req_in5  => '0',                                        -- (terminated)
			reset_in6      => '0',                                        -- (terminated)
			reset_req_in6  => '0',                                        -- (terminated)
			reset_in7      => '0',                                        -- (terminated)
			reset_req_in7  => '0',                                        -- (terminated)
			reset_in8      => '0',                                        -- (terminated)
			reset_req_in8  => '0',                                        -- (terminated)
			reset_in9      => '0',                                        -- (terminated)
			reset_req_in9  => '0',                                        -- (terminated)
			reset_in10     => '0',                                        -- (terminated)
			reset_req_in10 => '0',                                        -- (terminated)
			reset_in11     => '0',                                        -- (terminated)
			reset_req_in11 => '0',                                        -- (terminated)
			reset_in12     => '0',                                        -- (terminated)
			reset_req_in12 => '0',                                        -- (terminated)
			reset_in13     => '0',                                        -- (terminated)
			reset_req_in13 => '0',                                        -- (terminated)
			reset_in14     => '0',                                        -- (terminated)
			reset_req_in14 => '0',                                        -- (terminated)
			reset_in15     => '0',                                        -- (terminated)
			reset_req_in15 => '0'                                         -- (terminated)
		);

	rx_pll_locked <= u_phy_adapter_rx_pll_locked_export;

	rx_rst_proto_out <= u_rx_phy_mgmt_rx_rst_proto_out_export;

end architecture rtl; -- of sdi_ii_0001
