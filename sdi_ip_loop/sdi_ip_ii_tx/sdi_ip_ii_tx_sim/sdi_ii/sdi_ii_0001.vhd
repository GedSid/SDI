-- sdi_ii_0001.vhd

-- This file was auto-generated from sdi_ii_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.0 145

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sdi_ii_0001 is
	generic (
		FAMILY               : string  := "Cyclone V";
		VIDEO_STANDARD       : string  := "hd";
		SD_BIT_WIDTH         : integer := 10;
		DIRECTION            : string  := "tx";
		TRANSCEIVER_PROTOCOL : string  := "xcvr_proto";
		HD_FREQ              : string  := "148.5";
		XCVR_TX_PLL_SEL      : integer := 0;
		RX_INC_ERR_TOLERANCE : integer := 0;
		RX_CRC_ERROR_OUTPUT  : integer := 0;
		RX_EN_VPID_EXTRACT   : integer := 0;
		RX_EN_A2B_CONV       : integer := 0;
		RX_EN_B2A_CONV       : integer := 0;
		TX_EN_VPID_INSERT    : integer := 0;
		IS_RTL_SIM           : integer := 0
	);
	port (
		tx_rst             : in  std_logic                      := '0';             --             tx_rst.reset
		tx_enable_crc      : in  std_logic                      := '0';             --      tx_enable_crc.export
		tx_enable_ln       : in  std_logic                      := '0';             --       tx_enable_ln.export
		tx_ln              : in  std_logic_vector(10 downto 0)  := (others => '0'); --              tx_ln.export
		tx_datain          : in  std_logic_vector(19 downto 0)  := (others => '0'); --          tx_datain.export
		tx_datain_valid    : in  std_logic                      := '0';             --    tx_datain_valid.export
		tx_trs             : in  std_logic                      := '0';             --             tx_trs.export
		tx_dataout_valid   : out std_logic;                                         --   tx_dataout_valid.export
		tx_pclk            : in  std_logic                      := '0';             --            tx_pclk.clk
		tx_coreclk         : in  std_logic                      := '0';             --         tx_coreclk.clk
		xcvr_refclk        : in  std_logic                      := '0';             --        xcvr_refclk.clk
		sdi_tx             : out std_logic;                                         --             sdi_tx.export
		tx_pll_locked      : out std_logic;                                         --      tx_pll_locked.export
		tx_clkout          : out std_logic;                                         --          tx_clkout.clk
		reconfig_to_xcvr   : in  std_logic_vector(139 downto 0) := (others => '0'); --   reconfig_to_xcvr.reconfig_to_xcvr
		reconfig_from_xcvr : out std_logic_vector(91 downto 0)                      -- reconfig_from_xcvr.reconfig_from_xcvr
	);
end entity sdi_ii_0001;

architecture rtl of sdi_ii_0001 is
	component sdi_ii_phy_adapter is
		generic (
			FAMILY            : string  := "STRATIX V";
			VIDEO_STANDARD    : string  := "hd";
			DIRECTION         : string  := "du";
			XCVR_TX_PLL_SEL   : integer := 0;
			ED_TXPLL_SWITCH   : integer := 0;
			XCVR_RST_CTRL_CHS : integer := 1
		);
		port (
			xcvr_refclk                 : in  std_logic                      := 'X';             -- clk
			tx_pclk                     : in  std_logic                      := 'X';             -- clk
			tx_clkout                   : out std_logic;                                         -- clk
			reconfig_from_xcvr          : out std_logic_vector(91 downto 0);                     -- reconfig_from_xcvr
			reconfig_to_xcvr            : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			xcvr_reconfig_from_xcvr     : in  std_logic_vector(91 downto 0)  := (others => 'X'); -- reconfig_from_xcvr
			xcvr_reconfig_to_xcvr       : out std_logic_vector(139 downto 0);                    -- reconfig_to_xcvr
			tx_pll_refclk               : out std_logic;                                         -- tx_pll_refclk
			tx_std_coreclkin            : out std_logic;                                         -- tx_std_coreclkin
			sdi_tx_from_xcvr            : in  std_logic                      := 'X';             -- tx_serial_data
			tx_pll_locked_from_xcvr     : in  std_logic                      := 'X';             -- pll_locked
			sdi_tx                      : out std_logic;                                         -- export
			tx_pll_locked               : out std_logic;                                         -- export
			xcvr_tx_datain              : in  std_logic_vector(19 downto 0)  := (others => 'X'); -- export
			tx_datain_to_xcvr           : out std_logic_vector(43 downto 0);                     -- tx_parallel_data
			tx_pll_select_to_xcvr_rst   : out std_logic;                                         -- pll_select
			tx_clkout_from_xcvr         : in  std_logic                      := 'X';             -- tx_std_clkout
			xcvr_tx_ready               : in  std_logic                      := 'X';             -- tx_ready
			xcvr_refclk_alt             : in  std_logic                      := 'X';             -- clk
			reconfig_clk_in             : in  std_logic                      := 'X';             -- clk
			xcvr_rxclk                  : out std_logic;                                         -- clk
			xcvr_rxclk_b                : out std_logic;                                         -- clk
			reconfig_rst_in             : in  std_logic                      := 'X';             -- reset
			reset_to_xcvr_rst_ctrl      : out std_logic;                                         -- reset
			reset_to_xcvr_rst_ctrl_b    : out std_logic;                                         -- reset
			reconfig_from_xcvr_b        : out std_logic_vector(91 downto 0);                     -- reconfig_from_xcvr
			reconfig_to_xcvr_b          : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			xcvr_reconfig_from_xcvr_b   : in  std_logic_vector(91 downto 0)  := (others => 'X'); -- reconfig_from_xcvr
			xcvr_reconfig_to_xcvr_b     : out std_logic_vector(139 downto 0);                    -- reconfig_to_xcvr
			xcvr_refclk_sel             : in  std_logic                      := 'X';             -- export
			tx_pll_locked_alt           : out std_logic;                                         -- export
			tx_pll_refclk_b             : out std_logic;                                         -- tx_pll_refclk
			tx_std_coreclkin_b          : out std_logic;                                         -- tx_std_coreclkin
			sdi_tx_from_xcvr_b          : in  std_logic                      := 'X';             -- tx_serial_data
			sdi_tx_b                    : out std_logic;                                         -- export
			rx_std_coreclkin            : out std_logic;                                         -- rx_std_coreclkin
			rx_pma_clkout               : in  std_logic                      := 'X';             -- rx_pma_clkout
			trig_rst_ctrl               : in  std_logic                      := 'X';             -- export
			sdi_rx                      : in  std_logic                      := 'X';             -- export
			rx_set_locktodata           : in  std_logic                      := 'X';             -- export
			sdi_rx_to_xcvr              : out std_logic;                                         -- rx_serial_data
			rx_set_locktodata_to_xcvr   : out std_logic;                                         -- rx_set_locktodata
			rx_set_locktoref_to_xcvr    : out std_logic;                                         -- rx_set_locktoref
			rx_pll_locked               : out std_logic;                                         -- export
			rx_std_coreclkin_b          : out std_logic;                                         -- rx_std_coreclkin
			rx_pma_clkout_b             : in  std_logic                      := 'X';             -- rx_pma_clkout
			trig_rst_ctrl_b             : in  std_logic                      := 'X';             -- export
			sdi_rx_b                    : in  std_logic                      := 'X';             -- export
			rx_set_locktodata_b         : in  std_logic                      := 'X';             -- export
			sdi_rx_to_xcvr_b            : out std_logic;                                         -- rx_serial_data
			rx_set_locktodata_to_xcvr_b : out std_logic;                                         -- rx_set_locktodata
			rx_set_locktoref_to_xcvr_b  : out std_logic;                                         -- rx_set_locktoref
			rx_pll_locked_b             : out std_logic;                                         -- export
			reconfig_clk_out            : out std_logic;                                         -- clk
			reconfig_rst_out            : out std_logic;                                         -- reset
			tx_serial_clk_out           : out std_logic;                                         -- clk
			tx_serial_clk_alt_out       : out std_logic;                                         -- clk
			pll_powerdown_in            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- pll_powerdown
			pll_powerdown_out           : out std_logic;                                         -- pll_powerdown
			pll_powerdown_out_b         : out std_logic;                                         -- pll_powerdown
			pll_locked_in               : in  std_logic                      := 'X';             -- pll_locked
			pll_locked_in_b             : in  std_logic                      := 'X';             -- pll_locked
			pll_locked_out              : out std_logic_vector(1 downto 0);                      -- pll_locked
			tx_cal_busy_in              : in  std_logic                      := 'X';             -- tx_cal_busy
			pll_cal_busy_in             : in  std_logic                      := 'X';             -- pll_cal_busy
			pll_cal_busy_in_alt         : in  std_logic                      := 'X';             -- pll_cal_busy
			xcvr_tx_datain_b            : in  std_logic_vector(19 downto 0)  := (others => 'X'); -- export
			tx_datain_to_xcvr_b         : out std_logic_vector(43 downto 0);                     -- tx_parallel_data
			tx_analogreset_in           : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- tx_analogreset
			tx_analogreset_out          : out std_logic;                                         -- tx_analogreset
			tx_analogreset_out_b        : out std_logic;                                         -- tx_analogreset
			tx_digitalreset_in          : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- tx_digitalreset
			tx_digitalreset_out         : out std_logic;                                         -- tx_digitalreset
			tx_digitalreset_out_b       : out std_logic;                                         -- tx_digitalreset
			tx_cal_busy_in_b            : in  std_logic                      := 'X';             -- tx_cal_busy
			tx_pll_select_to_xcvr_rst_b : out std_logic;                                         -- pll_select
			xcvr_tx_ready_b             : in  std_logic                      := 'X';             -- tx_ready
			rx_dataout_from_xcvr        : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- rx_parallel_data
			xcvr_rx_is_lockedtoref      : in  std_logic                      := 'X';             -- rx_is_lockedtoref
			xcvr_rx_is_lockedtodata     : in  std_logic                      := 'X';             -- rx_is_lockedtodata
			xcvr_rx_dataout             : out std_logic_vector(19 downto 0);                     -- export
			rx_dataout_from_xcvr_b      : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- rx_parallel_data
			xcvr_rx_is_lockedtoref_b    : in  std_logic                      := 'X';             -- rx_is_lockedtoref
			xcvr_rx_is_lockedtodata_b   : in  std_logic                      := 'X';             -- rx_is_lockedtodata
			xcvr_rx_dataout_b           : out std_logic_vector(19 downto 0);                     -- export
			rx_analogreset_in           : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- rx_analogreset
			rx_analogreset_out          : out std_logic;                                         -- rx_analogreset
			rx_analogreset_out_b        : out std_logic;                                         -- rx_analogreset
			rx_digitalreset_in          : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- rx_digitalreset
			rx_digitalreset_out         : out std_logic;                                         -- rx_digitalreset
			rx_digitalreset_out_b       : out std_logic;                                         -- rx_digitalreset
			rx_cal_busy_in              : in  std_logic                      := 'X';             -- rx_cal_busy
			rx_cal_busy_in_b            : in  std_logic                      := 'X';             -- rx_cal_busy
			rx_cal_busy_out             : out std_logic_vector(1 downto 0);                      -- rx_cal_busy
			rx_locked_to_xcvr_ctrl_b    : out std_logic;                                         -- rx_is_lockedtodata
			rx_manual_b                 : out std_logic;                                         -- rx_reset_mode
			rx_ready_from_xcvr_b        : in  std_logic                      := 'X';             -- rx_ready
			tx_serial_clk_in            : in  std_logic                      := 'X';             -- clk
			tx_serial_clk_alt_in        : in  std_logic                      := 'X';             -- clk
			xcvr_rx_ready               : out std_logic;                                         -- export
			xcvr_rx_ready_b             : out std_logic;                                         -- export
			rx_cdr_refclk               : out std_logic;                                         -- rx_cdr_refclk
			rx_set_locktoref            : in  std_logic                      := 'X';             -- export
			rxclk_from_xcvr             : in  std_logic                      := 'X';             -- rx_std_clkout
			tx_clkout_from_xcvr_b       : in  std_logic                      := 'X';             -- tx_std_clkout
			rx_cdr_refclk_b             : out std_logic;                                         -- rx_cdr_refclk
			rxclk_from_xcvr_b           : in  std_logic                      := 'X';             -- rx_std_clkout
			rx_set_locktoref_b          : in  std_logic                      := 'X';             -- export
			tx_cal_busy_out             : out std_logic;                                         -- tx_cal_busy
			rx_locked_to_xcvr_ctrl      : out std_logic;                                         -- rx_is_lockedtodata
			rx_manual                   : out std_logic;                                         -- rx_reset_mode
			rx_ready_from_xcvr          : in  std_logic                      := 'X'              -- rx_ready
		);
	end component sdi_ii_phy_adapter;

	component altera_xcvr_native_av is
		generic (
			tx_enable                       : integer := 1;
			rx_enable                       : integer := 1;
			enable_std                      : integer := 1;
			data_path_select                : string  := "standard";
			channels                        : integer := 1;
			bonded_mode                     : string  := "non_bonded";
			data_rate                       : string  := "";
			pma_width                       : integer := 10;
			tx_pma_clk_div                  : integer := 1;
			pll_reconfig_enable             : integer := 0;
			pll_external_enable             : integer := 0;
			pll_data_rate                   : string  := "0 Mbps";
			pll_type                        : string  := "CMU";
			pma_bonding_mode                : string  := "x1";
			plls                            : integer := 1;
			pll_select                      : integer := 0;
			pll_refclk_cnt                  : integer := 1;
			pll_refclk_select               : string  := "0";
			pll_refclk_freq                 : string  := "125.0 MHz";
			pll_feedback_path               : string  := "internal";
			cdr_reconfig_enable             : integer := 0;
			cdr_refclk_cnt                  : integer := 1;
			cdr_refclk_select               : integer := 0;
			cdr_refclk_freq                 : string  := "";
			rx_ppm_detect_threshold         : string  := "1000";
			rx_clkslip_enable               : integer := 0;
			std_protocol_hint               : string  := "basic";
			std_pcs_pma_width               : integer := 10;
			std_low_latency_bypass_enable   : integer := 0;
			std_tx_pcfifo_mode              : string  := "low_latency";
			std_rx_pcfifo_mode              : string  := "low_latency";
			std_rx_byte_order_enable        : integer := 0;
			std_rx_byte_order_mode          : string  := "manual";
			std_rx_byte_order_width         : integer := 10;
			std_rx_byte_order_symbol_count  : integer := 1;
			std_rx_byte_order_pattern       : string  := "0";
			std_rx_byte_order_pad           : string  := "0";
			std_tx_byte_ser_enable          : integer := 0;
			std_rx_byte_deser_enable        : integer := 0;
			std_tx_8b10b_enable             : integer := 0;
			std_tx_8b10b_disp_ctrl_enable   : integer := 0;
			std_rx_8b10b_enable             : integer := 0;
			std_rx_rmfifo_enable            : integer := 0;
			std_rx_rmfifo_pattern_p         : string  := "00000";
			std_rx_rmfifo_pattern_n         : string  := "00000";
			std_tx_bitslip_enable           : integer := 0;
			std_rx_word_aligner_mode        : string  := "bit_slip";
			std_rx_word_aligner_pattern_len : integer := 7;
			std_rx_word_aligner_pattern     : string  := "0000000000";
			std_rx_word_aligner_rknumber    : integer := 3;
			std_rx_word_aligner_renumber    : integer := 3;
			std_rx_word_aligner_rgnumber    : integer := 3;
			std_rx_run_length_val           : integer := 31;
			std_tx_bitrev_enable            : integer := 0;
			std_rx_bitrev_enable            : integer := 0;
			std_tx_byterev_enable           : integer := 0;
			std_rx_byterev_enable           : integer := 0;
			std_tx_polinv_enable            : integer := 0;
			std_rx_polinv_enable            : integer := 0
		);
		port (
			pll_powerdown             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- pll_powerdown
			tx_analogreset            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_analogreset
			tx_digitalreset           : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_digitalreset
			tx_pll_refclk             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_pll_refclk
			tx_serial_data            : out std_logic_vector(0 downto 0);                      -- tx_serial_data
			pll_locked                : out std_logic_vector(0 downto 0);                      -- pll_locked
			tx_parallel_data          : in  std_logic_vector(43 downto 0)  := (others => 'X'); -- tx_parallel_data
			tx_std_coreclkin          : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_std_coreclkin
			tx_std_clkout             : out std_logic_vector(0 downto 0);                      -- tx_std_clkout
			tx_cal_busy               : out std_logic_vector(0 downto 0);                      -- tx_cal_busy
			reconfig_to_xcvr          : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			reconfig_from_xcvr        : out std_logic_vector(91 downto 0);                     -- reconfig_from_xcvr
			tx_pma_clkout             : out std_logic_vector(0 downto 0);                      -- tx_pma_clkout
			tx_pma_parallel_data      : in  std_logic_vector(79 downto 0)  := (others => 'X'); -- tx_pma_parallel_data
			ext_pll_clk               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- ext_pll_clk
			rx_analogreset            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_analogreset
			rx_digitalreset           : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_digitalreset
			rx_cdr_refclk             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_cdr_refclk
			rx_pma_clkout             : out std_logic_vector(0 downto 0);                      -- rx_pma_clkout
			rx_serial_data            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_serial_data
			rx_pma_parallel_data      : out std_logic_vector(79 downto 0);                     -- rx_pma_parallel_data
			rx_clkslip                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_clkslip
			rx_clklow                 : out std_logic_vector(0 downto 0);                      -- rx_clklow
			rx_fref                   : out std_logic_vector(0 downto 0);                      -- rx_fref
			rx_set_locktodata         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_set_locktodata
			rx_set_locktoref          : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_set_locktoref
			rx_is_lockedtoref         : out std_logic_vector(0 downto 0);                      -- rx_is_lockedtoref
			rx_is_lockedtodata        : out std_logic_vector(0 downto 0);                      -- rx_is_lockedtodata
			rx_seriallpbken           : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_seriallpbken
			rx_signaldetect           : out std_logic_vector(0 downto 0);                      -- rx_signaldetect
			rx_parallel_data          : out std_logic_vector(63 downto 0);                     -- rx_parallel_data
			rx_std_coreclkin          : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_coreclkin
			rx_std_clkout             : out std_logic_vector(0 downto 0);                      -- rx_std_clkout
			rx_std_prbs_done          : out std_logic_vector(0 downto 0);                      -- rx_std_prbs_done
			rx_std_prbs_err           : out std_logic_vector(0 downto 0);                      -- rx_std_prbs_err
			tx_std_pcfifo_full        : out std_logic_vector(0 downto 0);                      -- tx_std_pcfifo_full
			tx_std_pcfifo_empty       : out std_logic_vector(0 downto 0);                      -- tx_std_pcfifo_empty
			rx_std_pcfifo_full        : out std_logic_vector(0 downto 0);                      -- rx_std_pcfifo_full
			rx_std_pcfifo_empty       : out std_logic_vector(0 downto 0);                      -- rx_std_pcfifo_empty
			rx_std_byteorder_ena      : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_byteorder_ena
			rx_std_byteorder_flag     : out std_logic_vector(0 downto 0);                      -- rx_std_byteorder_flag
			rx_std_rmfifo_full        : out std_logic_vector(0 downto 0);                      -- rx_std_rmfifo_full
			rx_std_rmfifo_empty       : out std_logic_vector(0 downto 0);                      -- rx_std_rmfifo_empty
			rx_std_wa_patternalign    : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_wa_patternalign
			rx_std_wa_a1a2size        : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_wa_a1a2size
			tx_std_bitslipboundarysel : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- tx_std_bitslipboundarysel
			rx_std_bitslipboundarysel : out std_logic_vector(4 downto 0);                      -- rx_std_bitslipboundarysel
			rx_std_bitslip            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_bitslip
			rx_std_runlength_err      : out std_logic_vector(0 downto 0);                      -- rx_std_runlength_err
			rx_std_bitrev_ena         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_bitrev_ena
			rx_std_byterev_ena        : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_byterev_ena
			tx_std_polinv             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_std_polinv
			rx_std_polinv             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- rx_std_polinv
			tx_std_elecidle           : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_std_elecidle
			rx_std_signaldetect       : out std_logic_vector(0 downto 0);                      -- rx_std_signaldetect
			rx_cal_busy               : out std_logic_vector(0 downto 0)                       -- rx_cal_busy
		);
	end component altera_xcvr_native_av;

	component altera_xcvr_reset_control is
		generic (
			CHANNELS              : integer := 1;
			PLLS                  : integer := 1;
			SYS_CLK_IN_MHZ        : integer := 250;
			SYNCHRONIZE_RESET     : integer := 1;
			REDUCED_SIM_TIME      : integer := 1;
			TX_PLL_ENABLE         : integer := 1;
			T_PLL_POWERDOWN       : integer := 1000;
			SYNCHRONIZE_PLL_RESET : integer := 0;
			TX_ENABLE             : integer := 1;
			TX_PER_CHANNEL        : integer := 0;
			T_TX_DIGITALRESET     : integer := 20;
			T_PLL_LOCK_HYST       : integer := 0;
			EN_PLL_CAL_BUSY       : integer := 0;
			RX_ENABLE             : integer := 1;
			RX_PER_CHANNEL        : integer := 0;
			T_RX_ANALOGRESET      : integer := 40;
			T_RX_DIGITALRESET     : integer := 4000
		);
		port (
			clock              : in  std_logic                    := 'X';             -- clk
			reset              : in  std_logic                    := 'X';             -- reset
			pll_powerdown      : out std_logic_vector(0 downto 0);                    -- pll_powerdown
			tx_analogreset     : out std_logic_vector(0 downto 0);                    -- tx_analogreset
			tx_digitalreset    : out std_logic_vector(0 downto 0);                    -- tx_digitalreset
			tx_ready           : out std_logic_vector(0 downto 0);                    -- tx_ready
			pll_locked         : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_locked
			pll_select         : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_select
			tx_cal_busy        : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_cal_busy
			pll_cal_busy       : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_cal_busy
			tx_manual          : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_reset_mode
			rx_analogreset     : out std_logic_vector(0 downto 0);                    -- rx_analogreset
			rx_digitalreset    : out std_logic_vector(0 downto 0);                    -- rx_digitalreset
			rx_ready           : out std_logic_vector(0 downto 0);                    -- rx_ready
			rx_is_lockedtodata : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_is_lockedtodata
			rx_cal_busy        : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_cal_busy
			rx_manual          : in  std_logic_vector(0 downto 0) := (others => 'X'); -- rx_reset_mode
			tx_digitalreset_or : in  std_logic_vector(0 downto 0) := (others => 'X'); -- tx_digitalreset_or
			rx_digitalreset_or : in  std_logic_vector(0 downto 0) := (others => 'X')  -- rx_digitalreset_or
		);
	end component altera_xcvr_reset_control;

	component sdi_ii_tx_protocol is
		generic (
			VIDEO_STANDARD    : string  := "hd";
			SD_BIT_WIDTH      : integer := 10;
			TX_EN_VPID_INSERT : integer := 0
		);
		port (
			tx_pclk            : in  std_logic                     := 'X';             -- clk
			tx_rst             : in  std_logic                     := 'X';             -- reset
			tx_datain_valid    : in  std_logic                     := 'X';             -- export
			tx_trs             : in  std_logic                     := 'X';             -- export
			tx_enable_ln       : in  std_logic                     := 'X';             -- export
			tx_enable_crc      : in  std_logic                     := 'X';             -- export
			tx_dataout_valid   : out std_logic;                                        -- export
			tx_datain          : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			tx_dataout         : out std_logic_vector(19 downto 0);                    -- export
			tx_ln              : in  std_logic_vector(10 downto 0) := (others => 'X'); -- export
			tx_std             : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- export
			tx_std_out         : out std_logic_vector(2 downto 0);                     -- export
			tx_vpid_overwrite  : in  std_logic                     := 'X';             -- export
			tx_datain_b        : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			tx_datain_valid_b  : in  std_logic                     := 'X';             -- export
			tx_trs_b           : in  std_logic                     := 'X';             -- export
			tx_dataout_b       : out std_logic_vector(19 downto 0);                    -- export
			tx_dataout_valid_b : out std_logic;                                        -- export
			tx_ln_b            : in  std_logic_vector(10 downto 0) := (others => 'X'); -- export
			tx_vpid_byte1      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte2      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte3      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte4      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte1_b    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte2_b    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte3_b    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_vpid_byte4_b    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			tx_line_f0         : in  std_logic_vector(10 downto 0) := (others => 'X'); -- export
			tx_line_f1         : in  std_logic_vector(10 downto 0) := (others => 'X')  -- export
		);
	end component sdi_ii_tx_protocol;

	component sdi_ii_tx_phy_mgmt is
		generic (
			VIDEO_STANDARD : string  := "hd";
			SD_BIT_WIDTH   : integer := 10
		);
		port (
			tx_pclk            : in  std_logic                     := 'X';             -- clk
			tx_rst             : in  std_logic                     := 'X';             -- reset
			tx_datain_valid    : in  std_logic                     := 'X';             -- export
			tx_dataout_valid   : out std_logic;                                        -- export
			tx_datain          : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			xcvr_tx_dataout    : out std_logic_vector(19 downto 0);                    -- export
			tx_std             : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- export
			tx_datain_b        : in  std_logic_vector(19 downto 0) := (others => 'X'); -- export
			tx_datain_valid_b  : in  std_logic                     := 'X';             -- export
			tx_dataout_valid_b : out std_logic;                                        -- export
			xcvr_tx_dataout_b  : out std_logic_vector(19 downto 0)                     -- export
		);
	end component sdi_ii_tx_phy_mgmt;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal u_tx_phy_mgmt_xcvr_tx_dataout_export                 : std_logic_vector(19 downto 0);  -- u_tx_phy_mgmt:xcvr_tx_dataout -> u_phy_adapter:xcvr_tx_datain
	signal u_phy_pll_locked_pll_locked                          : std_logic_vector(0 downto 0);   -- u_phy:pll_locked -> [u_phy_adapter:tx_pll_locked_from_xcvr, u_tx_phy_rst_ctrl:pll_locked]
	signal u_tx_protocol_tx_dataout_export                      : std_logic_vector(19 downto 0);  -- u_tx_protocol:tx_dataout -> u_tx_phy_mgmt:tx_datain
	signal u_tx_protocol_tx_dataout_valid_export                : std_logic;                      -- u_tx_protocol:tx_dataout_valid -> u_tx_phy_mgmt:tx_datain_valid
	signal tx_rst_pclk_sync_reset_out_reset                     : std_logic;                      -- tx_rst_pclk_sync:reset_out -> [u_tx_phy_mgmt:tx_rst, u_tx_protocol:tx_rst]
	signal tx_rst_coreclk_sync_reset_out_reset                  : std_logic;                      -- tx_rst_coreclk_sync:reset_out -> u_tx_phy_rst_ctrl:reset
	signal u_tx_phy_rst_ctrl_pll_powerdown_pll_powerdown        : std_logic_vector(0 downto 0);   -- u_tx_phy_rst_ctrl:pll_powerdown -> u_phy:pll_powerdown
	signal u_tx_phy_rst_ctrl_tx_analogreset_tx_analogreset      : std_logic_vector(0 downto 0);   -- u_tx_phy_rst_ctrl:tx_analogreset -> u_phy:tx_analogreset
	signal u_tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset    : std_logic_vector(0 downto 0);   -- u_tx_phy_rst_ctrl:tx_digitalreset -> u_phy:tx_digitalreset
	signal u_phy_tx_cal_busy_tx_cal_busy                        : std_logic_vector(0 downto 0);   -- u_phy:tx_cal_busy -> u_tx_phy_rst_ctrl:tx_cal_busy
	signal u_phy_adapter_tx_pll_select_to_xcvr_rst_pll_select   : std_logic;                      -- u_phy_adapter:tx_pll_select_to_xcvr_rst -> u_tx_phy_rst_ctrl:pll_select
	signal u_tx_phy_rst_ctrl_tx_ready_tx_ready                  : std_logic_vector(0 downto 0);   -- u_tx_phy_rst_ctrl:tx_ready -> u_phy_adapter:xcvr_tx_ready
	signal u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr : std_logic_vector(139 downto 0); -- u_phy_adapter:xcvr_reconfig_to_xcvr -> u_phy:reconfig_to_xcvr
	signal u_phy_reconfig_from_xcvr_reconfig_from_xcvr          : std_logic_vector(91 downto 0);  -- u_phy:reconfig_from_xcvr -> u_phy_adapter:xcvr_reconfig_from_xcvr
	signal u_phy_adapter_tx_std_coreclkin_tx_std_coreclkin      : std_logic;                      -- u_phy_adapter:tx_std_coreclkin -> u_phy:tx_std_coreclkin
	signal u_phy_adapter_tx_pll_refclk_tx_pll_refclk            : std_logic;                      -- u_phy_adapter:tx_pll_refclk -> u_phy:tx_pll_refclk
	signal u_phy_tx_std_clkout_tx_std_clkout                    : std_logic_vector(0 downto 0);   -- u_phy:tx_std_clkout -> u_phy_adapter:tx_clkout_from_xcvr
	signal u_phy_adapter_tx_datain_to_xcvr_tx_parallel_data     : std_logic_vector(43 downto 0);  -- u_phy_adapter:tx_datain_to_xcvr -> u_phy:tx_parallel_data
	signal u_phy_tx_serial_data_tx_serial_data                  : std_logic_vector(0 downto 0);   -- u_phy:tx_serial_data -> u_phy_adapter:sdi_tx_from_xcvr

begin

	family_check : if FAMILY /= "Cyclone V" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	video_standard_check : if VIDEO_STANDARD /= "hd" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	sd_bit_width_check : if SD_BIT_WIDTH /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	direction_check : if DIRECTION /= "tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	transceiver_protocol_check : if TRANSCEIVER_PROTOCOL /= "xcvr_proto" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hd_freq_check : if HD_FREQ /= "148.5" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	xcvr_tx_pll_sel_check : if XCVR_TX_PLL_SEL /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_inc_err_tolerance_check : if RX_INC_ERR_TOLERANCE /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_crc_error_output_check : if RX_CRC_ERROR_OUTPUT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_vpid_extract_check : if RX_EN_VPID_EXTRACT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_a2b_conv_check : if RX_EN_A2B_CONV /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rx_en_b2a_conv_check : if RX_EN_B2A_CONV /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	tx_en_vpid_insert_check : if TX_EN_VPID_INSERT /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	is_rtl_sim_check : if IS_RTL_SIM /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	u_phy_adapter : component sdi_ii_phy_adapter
		generic map (
			FAMILY            => "Cyclone V",
			VIDEO_STANDARD    => "hd",
			DIRECTION         => "tx",
			XCVR_TX_PLL_SEL   => 0,
			ED_TXPLL_SWITCH   => 0,
			XCVR_RST_CTRL_CHS => 1
		)
		port map (
			xcvr_refclk                 => xcvr_refclk,                                                                                                                                    --               xcvr_refclk.clk
			tx_pclk                     => tx_pclk,                                                                                                                                        --                   tx_pclk.clk
			tx_clkout                   => tx_clkout,                                                                                                                                      --                 tx_clkout.clk
			reconfig_from_xcvr          => reconfig_from_xcvr,                                                                                                                             --        reconfig_from_xcvr.reconfig_from_xcvr
			reconfig_to_xcvr            => reconfig_to_xcvr,                                                                                                                               --          reconfig_to_xcvr.reconfig_to_xcvr
			xcvr_reconfig_from_xcvr     => u_phy_reconfig_from_xcvr_reconfig_from_xcvr,                                                                                                    --   xcvr_reconfig_from_xcvr.reconfig_from_xcvr
			xcvr_reconfig_to_xcvr       => u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr,                                                                                           --     xcvr_reconfig_to_xcvr.reconfig_to_xcvr
			tx_pll_refclk               => u_phy_adapter_tx_pll_refclk_tx_pll_refclk,                                                                                                      --             tx_pll_refclk.tx_pll_refclk
			tx_std_coreclkin            => u_phy_adapter_tx_std_coreclkin_tx_std_coreclkin,                                                                                                --          tx_std_coreclkin.tx_std_coreclkin
			sdi_tx_from_xcvr            => u_phy_tx_serial_data_tx_serial_data(0),                                                                                                         --          sdi_tx_from_xcvr.tx_serial_data
			tx_pll_locked_from_xcvr     => u_phy_pll_locked_pll_locked(0),                                                                                                                 --   tx_pll_locked_from_xcvr.pll_locked
			sdi_tx                      => sdi_tx,                                                                                                                                         --                    sdi_tx.export
			tx_pll_locked               => tx_pll_locked,                                                                                                                                  --             tx_pll_locked.export
			xcvr_tx_datain              => u_tx_phy_mgmt_xcvr_tx_dataout_export,                                                                                                           --            xcvr_tx_datain.export
			tx_datain_to_xcvr           => u_phy_adapter_tx_datain_to_xcvr_tx_parallel_data,                                                                                               --         tx_datain_to_xcvr.tx_parallel_data
			tx_pll_select_to_xcvr_rst   => u_phy_adapter_tx_pll_select_to_xcvr_rst_pll_select,                                                                                             -- tx_pll_select_to_xcvr_rst.pll_select
			tx_clkout_from_xcvr         => u_phy_tx_std_clkout_tx_std_clkout(0),                                                                                                           --       tx_clkout_from_xcvr.tx_std_clkout
			xcvr_tx_ready               => u_tx_phy_rst_ctrl_tx_ready_tx_ready(0),                                                                                                         --             xcvr_tx_ready.tx_ready
			xcvr_refclk_alt             => '0',                                                                                                                                            --               (terminated)
			reconfig_clk_in             => '0',                                                                                                                                            --               (terminated)
			xcvr_rxclk                  => open,                                                                                                                                           --               (terminated)
			xcvr_rxclk_b                => open,                                                                                                                                           --               (terminated)
			reconfig_rst_in             => '0',                                                                                                                                            --               (terminated)
			reset_to_xcvr_rst_ctrl      => open,                                                                                                                                           --               (terminated)
			reset_to_xcvr_rst_ctrl_b    => open,                                                                                                                                           --               (terminated)
			reconfig_from_xcvr_b        => open,                                                                                                                                           --               (terminated)
			reconfig_to_xcvr_b          => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", --               (terminated)
			xcvr_reconfig_from_xcvr_b   => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",                                                 --               (terminated)
			xcvr_reconfig_to_xcvr_b     => open,                                                                                                                                           --               (terminated)
			xcvr_refclk_sel             => '0',                                                                                                                                            --               (terminated)
			tx_pll_locked_alt           => open,                                                                                                                                           --               (terminated)
			tx_pll_refclk_b             => open,                                                                                                                                           --               (terminated)
			tx_std_coreclkin_b          => open,                                                                                                                                           --               (terminated)
			sdi_tx_from_xcvr_b          => '0',                                                                                                                                            --               (terminated)
			sdi_tx_b                    => open,                                                                                                                                           --               (terminated)
			rx_std_coreclkin            => open,                                                                                                                                           --               (terminated)
			rx_pma_clkout               => '0',                                                                                                                                            --               (terminated)
			trig_rst_ctrl               => '0',                                                                                                                                            --               (terminated)
			sdi_rx                      => '0',                                                                                                                                            --               (terminated)
			rx_set_locktodata           => '0',                                                                                                                                            --               (terminated)
			sdi_rx_to_xcvr              => open,                                                                                                                                           --               (terminated)
			rx_set_locktodata_to_xcvr   => open,                                                                                                                                           --               (terminated)
			rx_set_locktoref_to_xcvr    => open,                                                                                                                                           --               (terminated)
			rx_pll_locked               => open,                                                                                                                                           --               (terminated)
			rx_std_coreclkin_b          => open,                                                                                                                                           --               (terminated)
			rx_pma_clkout_b             => '0',                                                                                                                                            --               (terminated)
			trig_rst_ctrl_b             => '0',                                                                                                                                            --               (terminated)
			sdi_rx_b                    => '0',                                                                                                                                            --               (terminated)
			rx_set_locktodata_b         => '0',                                                                                                                                            --               (terminated)
			sdi_rx_to_xcvr_b            => open,                                                                                                                                           --               (terminated)
			rx_set_locktodata_to_xcvr_b => open,                                                                                                                                           --               (terminated)
			rx_set_locktoref_to_xcvr_b  => open,                                                                                                                                           --               (terminated)
			rx_pll_locked_b             => open,                                                                                                                                           --               (terminated)
			reconfig_clk_out            => open,                                                                                                                                           --               (terminated)
			reconfig_rst_out            => open,                                                                                                                                           --               (terminated)
			tx_serial_clk_out           => open,                                                                                                                                           --               (terminated)
			tx_serial_clk_alt_out       => open,                                                                                                                                           --               (terminated)
			pll_powerdown_in            => "00",                                                                                                                                           --               (terminated)
			pll_powerdown_out           => open,                                                                                                                                           --               (terminated)
			pll_powerdown_out_b         => open,                                                                                                                                           --               (terminated)
			pll_locked_in               => '0',                                                                                                                                            --               (terminated)
			pll_locked_in_b             => '0',                                                                                                                                            --               (terminated)
			pll_locked_out              => open,                                                                                                                                           --               (terminated)
			tx_cal_busy_in              => '0',                                                                                                                                            --               (terminated)
			pll_cal_busy_in             => '0',                                                                                                                                            --               (terminated)
			pll_cal_busy_in_alt         => '0',                                                                                                                                            --               (terminated)
			xcvr_tx_datain_b            => "00000000000000000000",                                                                                                                         --               (terminated)
			tx_datain_to_xcvr_b         => open,                                                                                                                                           --               (terminated)
			tx_analogreset_in           => "00",                                                                                                                                           --               (terminated)
			tx_analogreset_out          => open,                                                                                                                                           --               (terminated)
			tx_analogreset_out_b        => open,                                                                                                                                           --               (terminated)
			tx_digitalreset_in          => "00",                                                                                                                                           --               (terminated)
			tx_digitalreset_out         => open,                                                                                                                                           --               (terminated)
			tx_digitalreset_out_b       => open,                                                                                                                                           --               (terminated)
			tx_cal_busy_in_b            => '0',                                                                                                                                            --               (terminated)
			tx_pll_select_to_xcvr_rst_b => open,                                                                                                                                           --               (terminated)
			xcvr_tx_ready_b             => '0',                                                                                                                                            --               (terminated)
			rx_dataout_from_xcvr        => "0000000000000000000000000000000000000000000000000000000000000000",                                                                             --               (terminated)
			xcvr_rx_is_lockedtoref      => '0',                                                                                                                                            --               (terminated)
			xcvr_rx_is_lockedtodata     => '0',                                                                                                                                            --               (terminated)
			xcvr_rx_dataout             => open,                                                                                                                                           --               (terminated)
			rx_dataout_from_xcvr_b      => "0000000000000000000000000000000000000000000000000000000000000000",                                                                             --               (terminated)
			xcvr_rx_is_lockedtoref_b    => '0',                                                                                                                                            --               (terminated)
			xcvr_rx_is_lockedtodata_b   => '0',                                                                                                                                            --               (terminated)
			xcvr_rx_dataout_b           => open,                                                                                                                                           --               (terminated)
			rx_analogreset_in           => "00",                                                                                                                                           --               (terminated)
			rx_analogreset_out          => open,                                                                                                                                           --               (terminated)
			rx_analogreset_out_b        => open,                                                                                                                                           --               (terminated)
			rx_digitalreset_in          => "00",                                                                                                                                           --               (terminated)
			rx_digitalreset_out         => open,                                                                                                                                           --               (terminated)
			rx_digitalreset_out_b       => open,                                                                                                                                           --               (terminated)
			rx_cal_busy_in              => '0',                                                                                                                                            --               (terminated)
			rx_cal_busy_in_b            => '0',                                                                                                                                            --               (terminated)
			rx_cal_busy_out             => open,                                                                                                                                           --               (terminated)
			rx_locked_to_xcvr_ctrl_b    => open,                                                                                                                                           --               (terminated)
			rx_manual_b                 => open,                                                                                                                                           --               (terminated)
			rx_ready_from_xcvr_b        => '0',                                                                                                                                            --               (terminated)
			tx_serial_clk_in            => '0',                                                                                                                                            --               (terminated)
			tx_serial_clk_alt_in        => '0',                                                                                                                                            --               (terminated)
			xcvr_rx_ready               => open,                                                                                                                                           --               (terminated)
			xcvr_rx_ready_b             => open,                                                                                                                                           --               (terminated)
			rx_cdr_refclk               => open,                                                                                                                                           --               (terminated)
			rx_set_locktoref            => '0',                                                                                                                                            --               (terminated)
			rxclk_from_xcvr             => '0',                                                                                                                                            --               (terminated)
			tx_clkout_from_xcvr_b       => '0',                                                                                                                                            --               (terminated)
			rx_cdr_refclk_b             => open,                                                                                                                                           --               (terminated)
			rxclk_from_xcvr_b           => '0',                                                                                                                                            --               (terminated)
			rx_set_locktoref_b          => '0',                                                                                                                                            --               (terminated)
			tx_cal_busy_out             => open,                                                                                                                                           --               (terminated)
			rx_locked_to_xcvr_ctrl      => open,                                                                                                                                           --               (terminated)
			rx_manual                   => open,                                                                                                                                           --               (terminated)
			rx_ready_from_xcvr          => '0'                                                                                                                                             --               (terminated)
		);

	u_phy : component altera_xcvr_native_av
		generic map (
			tx_enable                       => 1,
			rx_enable                       => 0,
			enable_std                      => 1,
			data_path_select                => "standard",
			channels                        => 1,
			bonded_mode                     => "non_bonded",
			data_rate                       => "1485 Mbps",
			pma_width                       => 10,
			tx_pma_clk_div                  => 2,
			pll_reconfig_enable             => 0,
			pll_external_enable             => 0,
			pll_data_rate                   => "2970 Mbps",
			pll_type                        => "CMU",
			pma_bonding_mode                => "x1",
			plls                            => 1,
			pll_select                      => 0,
			pll_refclk_cnt                  => 1,
			pll_refclk_select               => "0",
			pll_refclk_freq                 => "148.5 MHz",
			pll_feedback_path               => "internal",
			cdr_reconfig_enable             => 0,
			cdr_refclk_cnt                  => 1,
			cdr_refclk_select               => 0,
			cdr_refclk_freq                 => "148.5 MHz",
			rx_ppm_detect_threshold         => "1000",
			rx_clkslip_enable               => 0,
			std_protocol_hint               => "basic",
			std_pcs_pma_width               => 10,
			std_low_latency_bypass_enable   => 0,
			std_tx_pcfifo_mode              => "low_latency",
			std_rx_pcfifo_mode              => "low_latency",
			std_rx_byte_order_enable        => 0,
			std_rx_byte_order_mode          => "manual",
			std_rx_byte_order_width         => 10,
			std_rx_byte_order_symbol_count  => 1,
			std_rx_byte_order_pattern       => "0",
			std_rx_byte_order_pad           => "0",
			std_tx_byte_ser_enable          => 1,
			std_rx_byte_deser_enable        => 1,
			std_tx_8b10b_enable             => 0,
			std_tx_8b10b_disp_ctrl_enable   => 0,
			std_rx_8b10b_enable             => 0,
			std_rx_rmfifo_enable            => 0,
			std_rx_rmfifo_pattern_p         => "00000",
			std_rx_rmfifo_pattern_n         => "00000",
			std_tx_bitslip_enable           => 0,
			std_rx_word_aligner_mode        => "bit_slip",
			std_rx_word_aligner_pattern_len => 7,
			std_rx_word_aligner_pattern     => "0000000000",
			std_rx_word_aligner_rknumber    => 3,
			std_rx_word_aligner_renumber    => 3,
			std_rx_word_aligner_rgnumber    => 3,
			std_rx_run_length_val           => 31,
			std_tx_bitrev_enable            => 0,
			std_rx_bitrev_enable            => 0,
			std_tx_byterev_enable           => 0,
			std_rx_byterev_enable           => 0,
			std_tx_polinv_enable            => 0,
			std_rx_polinv_enable            => 0
		)
		port map (
			pll_powerdown             => u_tx_phy_rst_ctrl_pll_powerdown_pll_powerdown,                                      --      pll_powerdown.pll_powerdown
			tx_analogreset            => u_tx_phy_rst_ctrl_tx_analogreset_tx_analogreset,                                    --     tx_analogreset.tx_analogreset
			tx_digitalreset           => u_tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset,                                  --    tx_digitalreset.tx_digitalreset
			tx_pll_refclk(0)          => u_phy_adapter_tx_pll_refclk_tx_pll_refclk,                                          --      tx_pll_refclk.tx_pll_refclk
			tx_serial_data            => u_phy_tx_serial_data_tx_serial_data,                                                --     tx_serial_data.tx_serial_data
			pll_locked                => u_phy_pll_locked_pll_locked,                                                        --         pll_locked.pll_locked
			tx_parallel_data          => u_phy_adapter_tx_datain_to_xcvr_tx_parallel_data,                                   --   tx_parallel_data.tx_parallel_data
			tx_std_coreclkin(0)       => u_phy_adapter_tx_std_coreclkin_tx_std_coreclkin,                                    --   tx_std_coreclkin.tx_std_coreclkin
			tx_std_clkout             => u_phy_tx_std_clkout_tx_std_clkout,                                                  --      tx_std_clkout.tx_std_clkout
			tx_cal_busy               => u_phy_tx_cal_busy_tx_cal_busy,                                                      --        tx_cal_busy.tx_cal_busy
			reconfig_to_xcvr          => u_phy_adapter_xcvr_reconfig_to_xcvr_reconfig_to_xcvr,                               --   reconfig_to_xcvr.reconfig_to_xcvr
			reconfig_from_xcvr        => u_phy_reconfig_from_xcvr_reconfig_from_xcvr,                                        -- reconfig_from_xcvr.reconfig_from_xcvr
			tx_pma_clkout             => open,                                                                               --        (terminated)
			tx_pma_parallel_data      => "00000000000000000000000000000000000000000000000000000000000000000000000000000000", --        (terminated)
			ext_pll_clk               => "0",                                                                                --        (terminated)
			rx_analogreset            => "0",                                                                                --        (terminated)
			rx_digitalreset           => "0",                                                                                --        (terminated)
			rx_cdr_refclk             => "0",                                                                                --        (terminated)
			rx_pma_clkout             => open,                                                                               --        (terminated)
			rx_serial_data            => "0",                                                                                --        (terminated)
			rx_pma_parallel_data      => open,                                                                               --        (terminated)
			rx_clkslip                => "0",                                                                                --        (terminated)
			rx_clklow                 => open,                                                                               --        (terminated)
			rx_fref                   => open,                                                                               --        (terminated)
			rx_set_locktodata         => "0",                                                                                --        (terminated)
			rx_set_locktoref          => "0",                                                                                --        (terminated)
			rx_is_lockedtoref         => open,                                                                               --        (terminated)
			rx_is_lockedtodata        => open,                                                                               --        (terminated)
			rx_seriallpbken           => "0",                                                                                --        (terminated)
			rx_signaldetect           => open,                                                                               --        (terminated)
			rx_parallel_data          => open,                                                                               --        (terminated)
			rx_std_coreclkin          => "0",                                                                                --        (terminated)
			rx_std_clkout             => open,                                                                               --        (terminated)
			rx_std_prbs_done          => open,                                                                               --        (terminated)
			rx_std_prbs_err           => open,                                                                               --        (terminated)
			tx_std_pcfifo_full        => open,                                                                               --        (terminated)
			tx_std_pcfifo_empty       => open,                                                                               --        (terminated)
			rx_std_pcfifo_full        => open,                                                                               --        (terminated)
			rx_std_pcfifo_empty       => open,                                                                               --        (terminated)
			rx_std_byteorder_ena      => "0",                                                                                --        (terminated)
			rx_std_byteorder_flag     => open,                                                                               --        (terminated)
			rx_std_rmfifo_full        => open,                                                                               --        (terminated)
			rx_std_rmfifo_empty       => open,                                                                               --        (terminated)
			rx_std_wa_patternalign    => "0",                                                                                --        (terminated)
			rx_std_wa_a1a2size        => "0",                                                                                --        (terminated)
			tx_std_bitslipboundarysel => "00000",                                                                            --        (terminated)
			rx_std_bitslipboundarysel => open,                                                                               --        (terminated)
			rx_std_bitslip            => "0",                                                                                --        (terminated)
			rx_std_runlength_err      => open,                                                                               --        (terminated)
			rx_std_bitrev_ena         => "0",                                                                                --        (terminated)
			rx_std_byterev_ena        => "0",                                                                                --        (terminated)
			tx_std_polinv             => "0",                                                                                --        (terminated)
			rx_std_polinv             => "0",                                                                                --        (terminated)
			tx_std_elecidle           => "0",                                                                                --        (terminated)
			rx_std_signaldetect       => open,                                                                               --        (terminated)
			rx_cal_busy               => open                                                                                --        (terminated)
		);

	u_tx_phy_rst_ctrl : component altera_xcvr_reset_control
		generic map (
			CHANNELS              => 1,
			PLLS                  => 1,
			SYS_CLK_IN_MHZ        => 148,
			SYNCHRONIZE_RESET     => 0,
			REDUCED_SIM_TIME      => 0,
			TX_PLL_ENABLE         => 1,
			T_PLL_POWERDOWN       => 1000,
			SYNCHRONIZE_PLL_RESET => 0,
			TX_ENABLE             => 1,
			TX_PER_CHANNEL        => 0,
			T_TX_DIGITALRESET     => 20,
			T_PLL_LOCK_HYST       => 0,
			EN_PLL_CAL_BUSY       => 0,
			RX_ENABLE             => 0,
			RX_PER_CHANNEL        => 0,
			T_RX_ANALOGRESET      => 40,
			T_RX_DIGITALRESET     => 4000
		)
		port map (
			clock              => tx_coreclk,                                         --           clock.clk
			reset              => tx_rst_coreclk_sync_reset_out_reset,                --           reset.reset
			pll_powerdown      => u_tx_phy_rst_ctrl_pll_powerdown_pll_powerdown,      --   pll_powerdown.pll_powerdown
			tx_analogreset     => u_tx_phy_rst_ctrl_tx_analogreset_tx_analogreset,    --  tx_analogreset.tx_analogreset
			tx_digitalreset    => u_tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset,  -- tx_digitalreset.tx_digitalreset
			tx_ready           => u_tx_phy_rst_ctrl_tx_ready_tx_ready,                --        tx_ready.tx_ready
			pll_locked         => u_phy_pll_locked_pll_locked,                        --      pll_locked.pll_locked
			pll_select(0)      => u_phy_adapter_tx_pll_select_to_xcvr_rst_pll_select, --      pll_select.pll_select
			tx_cal_busy        => u_phy_tx_cal_busy_tx_cal_busy,                      --     tx_cal_busy.tx_cal_busy
			pll_cal_busy       => "0",                                                --     (terminated)
			tx_manual          => "0",                                                --     (terminated)
			rx_analogreset     => open,                                               --     (terminated)
			rx_digitalreset    => open,                                               --     (terminated)
			rx_ready           => open,                                               --     (terminated)
			rx_is_lockedtodata => "0",                                                --     (terminated)
			rx_cal_busy        => "0",                                                --     (terminated)
			rx_manual          => "0",                                                --     (terminated)
			tx_digitalreset_or => "0",                                                --     (terminated)
			rx_digitalreset_or => "0"                                                 --     (terminated)
		);

	u_tx_protocol : component sdi_ii_tx_protocol
		generic map (
			VIDEO_STANDARD    => "hd",
			SD_BIT_WIDTH      => 10,
			TX_EN_VPID_INSERT => 0
		)
		port map (
			tx_pclk            => tx_pclk,                               --          tx_pclk.clk
			tx_rst             => tx_rst_pclk_sync_reset_out_reset,      --           tx_rst.reset
			tx_datain_valid    => tx_datain_valid,                       --  tx_datain_valid.export
			tx_trs             => tx_trs,                                --           tx_trs.export
			tx_enable_ln       => tx_enable_ln,                          --     tx_enable_ln.export
			tx_enable_crc      => tx_enable_crc,                         --    tx_enable_crc.export
			tx_dataout_valid   => u_tx_protocol_tx_dataout_valid_export, -- tx_dataout_valid.export
			tx_datain          => tx_datain,                             --        tx_datain.export
			tx_dataout         => u_tx_protocol_tx_dataout_export,       --       tx_dataout.export
			tx_ln              => tx_ln,                                 --            tx_ln.export
			tx_std             => "000",                                 --      (terminated)
			tx_std_out         => open,                                  --      (terminated)
			tx_vpid_overwrite  => '0',                                   --      (terminated)
			tx_datain_b        => "00000000000000000000",                --      (terminated)
			tx_datain_valid_b  => '0',                                   --      (terminated)
			tx_trs_b           => '0',                                   --      (terminated)
			tx_dataout_b       => open,                                  --      (terminated)
			tx_dataout_valid_b => open,                                  --      (terminated)
			tx_ln_b            => "00000000000",                         --      (terminated)
			tx_vpid_byte1      => "00000000",                            --      (terminated)
			tx_vpid_byte2      => "00000000",                            --      (terminated)
			tx_vpid_byte3      => "00000000",                            --      (terminated)
			tx_vpid_byte4      => "00000000",                            --      (terminated)
			tx_vpid_byte1_b    => "00000000",                            --      (terminated)
			tx_vpid_byte2_b    => "00000000",                            --      (terminated)
			tx_vpid_byte3_b    => "00000000",                            --      (terminated)
			tx_vpid_byte4_b    => "00000000",                            --      (terminated)
			tx_line_f0         => "00000000000",                         --      (terminated)
			tx_line_f1         => "00000000000"                          --      (terminated)
		);

	u_tx_phy_mgmt : component sdi_ii_tx_phy_mgmt
		generic map (
			VIDEO_STANDARD => "hd",
			SD_BIT_WIDTH   => 10
		)
		port map (
			tx_pclk            => tx_pclk,                               --          tx_pclk.clk
			tx_rst             => tx_rst_pclk_sync_reset_out_reset,      --           tx_rst.reset
			tx_datain_valid    => u_tx_protocol_tx_dataout_valid_export, --  tx_datain_valid.export
			tx_dataout_valid   => tx_dataout_valid,                      -- tx_dataout_valid.export
			tx_datain          => u_tx_protocol_tx_dataout_export,       --        tx_datain.export
			xcvr_tx_dataout    => u_tx_phy_mgmt_xcvr_tx_dataout_export,  --  xcvr_tx_dataout.export
			tx_std             => "000",                                 --      (terminated)
			tx_datain_b        => "00000000000000000000",                --      (terminated)
			tx_datain_valid_b  => '0',                                   --      (terminated)
			tx_dataout_valid_b => open,                                  --      (terminated)
			xcvr_tx_dataout_b  => open                                   --      (terminated)
		);

	tx_rst_coreclk_sync : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => tx_rst,                              -- reset_in0.reset
			clk            => tx_coreclk,                          --       clk.clk
			reset_out      => tx_rst_coreclk_sync_reset_out_reset, -- reset_out.reset
			reset_req      => open,                                -- (terminated)
			reset_req_in0  => '0',                                 -- (terminated)
			reset_in1      => '0',                                 -- (terminated)
			reset_req_in1  => '0',                                 -- (terminated)
			reset_in2      => '0',                                 -- (terminated)
			reset_req_in2  => '0',                                 -- (terminated)
			reset_in3      => '0',                                 -- (terminated)
			reset_req_in3  => '0',                                 -- (terminated)
			reset_in4      => '0',                                 -- (terminated)
			reset_req_in4  => '0',                                 -- (terminated)
			reset_in5      => '0',                                 -- (terminated)
			reset_req_in5  => '0',                                 -- (terminated)
			reset_in6      => '0',                                 -- (terminated)
			reset_req_in6  => '0',                                 -- (terminated)
			reset_in7      => '0',                                 -- (terminated)
			reset_req_in7  => '0',                                 -- (terminated)
			reset_in8      => '0',                                 -- (terminated)
			reset_req_in8  => '0',                                 -- (terminated)
			reset_in9      => '0',                                 -- (terminated)
			reset_req_in9  => '0',                                 -- (terminated)
			reset_in10     => '0',                                 -- (terminated)
			reset_req_in10 => '0',                                 -- (terminated)
			reset_in11     => '0',                                 -- (terminated)
			reset_req_in11 => '0',                                 -- (terminated)
			reset_in12     => '0',                                 -- (terminated)
			reset_req_in12 => '0',                                 -- (terminated)
			reset_in13     => '0',                                 -- (terminated)
			reset_req_in13 => '0',                                 -- (terminated)
			reset_in14     => '0',                                 -- (terminated)
			reset_req_in14 => '0',                                 -- (terminated)
			reset_in15     => '0',                                 -- (terminated)
			reset_req_in15 => '0'                                  -- (terminated)
		);

	tx_rst_pclk_sync : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => tx_rst,                           -- reset_in0.reset
			clk            => tx_pclk,                          --       clk.clk
			reset_out      => tx_rst_pclk_sync_reset_out_reset, -- reset_out.reset
			reset_req      => open,                             -- (terminated)
			reset_req_in0  => '0',                              -- (terminated)
			reset_in1      => '0',                              -- (terminated)
			reset_req_in1  => '0',                              -- (terminated)
			reset_in2      => '0',                              -- (terminated)
			reset_req_in2  => '0',                              -- (terminated)
			reset_in3      => '0',                              -- (terminated)
			reset_req_in3  => '0',                              -- (terminated)
			reset_in4      => '0',                              -- (terminated)
			reset_req_in4  => '0',                              -- (terminated)
			reset_in5      => '0',                              -- (terminated)
			reset_req_in5  => '0',                              -- (terminated)
			reset_in6      => '0',                              -- (terminated)
			reset_req_in6  => '0',                              -- (terminated)
			reset_in7      => '0',                              -- (terminated)
			reset_req_in7  => '0',                              -- (terminated)
			reset_in8      => '0',                              -- (terminated)
			reset_req_in8  => '0',                              -- (terminated)
			reset_in9      => '0',                              -- (terminated)
			reset_req_in9  => '0',                              -- (terminated)
			reset_in10     => '0',                              -- (terminated)
			reset_req_in10 => '0',                              -- (terminated)
			reset_in11     => '0',                              -- (terminated)
			reset_req_in11 => '0',                              -- (terminated)
			reset_in12     => '0',                              -- (terminated)
			reset_req_in12 => '0',                              -- (terminated)
			reset_in13     => '0',                              -- (terminated)
			reset_req_in13 => '0',                              -- (terminated)
			reset_in14     => '0',                              -- (terminated)
			reset_req_in14 => '0',                              -- (terminated)
			reset_in15     => '0',                              -- (terminated)
			reset_req_in15 => '0'                               -- (terminated)
		);

end architecture rtl; -- of sdi_ii_0001
